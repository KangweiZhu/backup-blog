{"title":"接口测试","uid":"c5b4816193947aa93e977c106cb13634","slug":"接口自动化","date":"2023-02-12T14:34:49.000Z","updated":"2023-11-08T23:11:26.282Z","comments":true,"path":"api/articles/接口自动化.json","keywords":"Kangwei Zhu's Blog","cover":"/img/rice.jpg","content":"<h2 id=\"1-回顾\"><a href=\"#1-回顾\" class=\"headerlink\" title=\"1. 回顾\"></a>1. 回顾</h2><h3 id=\"1-1-URL\"><a href=\"#1-1-URL\" class=\"headerlink\" title=\"1.1 URL\"></a>1.1 URL</h3><p><strong>URL</strong>： 统一资源定位符</p>\n<p><strong>格式</strong>： 协议:&#x2F;&#x2F;hostname:port&#x2F;path?参数&#x3D;值&amp;参数2&#x3D;值</p>\n<p><strong>默认端口号</strong>可以不写</p>\n<p>http:80</p>\n<p>https:443</p>\n<h3 id=\"1-2-HTTP-HTTPS\"><a href=\"#1-2-HTTP-HTTPS\" class=\"headerlink\" title=\"1.2 HTTP &#x2F; HTTPS\"></a>1.2 HTTP &#x2F; HTTPS</h3><p>超文本传输协议。基于响应和请求的应用层协议</p>\n<p>规定了客户端和服务器之间信息的传递规范。</p>\n<p>组成：</p>\n<ul>\n<li>HTTP请求定义了请求数据格式</li>\n<li>HTTP响应定义了响应数据格式</li>\n</ul>\n<h4 id=\"1-2-1-HTTP-请求行\"><a href=\"#1-2-1-HTTP-请求行\" class=\"headerlink\" title=\"1.2.1 HTTP 请求行\"></a>1.2.1 HTTP 请求行</h4><p>位于请求数据的第一行。表明了请求方式，访问的资源，协议版本</p>\n<p>格式：[请求方法] [url] [协议&#x2F;协议版本]</p>\n<p>常用请求方法：</p>\n<ol>\n<li>POST 在服务器新建一个资源</li>\n<li>GET 从服务器获取资源</li>\n<li>DELETE 从服务器删除资源</li>\n<li>PUT 在服务器更新资源</li>\n</ol>\n<h4 id=\"1-2-2-HTTP-请求头\"><a href=\"#1-2-2-HTTP-请求头\" class=\"headerlink\" title=\"1.2.2 HTTP 请求头\"></a>1.2.2 HTTP 请求头</h4><blockquote>\n<p>Request-header</p>\n</blockquote>\n<p>位于请求数据的<strong>第二行到空白行之间</strong>。作用是通知服务器客户端的请求信息。请求头部由<strong>键值对</strong>组成。每行一对。</p>\n<p>常见的参数：</p>\n<p>Host、User-Agent、Content-Type</p>\n<p>Content-Type用于表明<strong>请求体</strong>的数据类型，通常有：</p>\n<ul>\n<li>text&#x2F;html</li>\n<li>image&#x2F;jpeg</li>\n<li>application&#x2F;json</li>\n<li>application&#x2F;x-www-form-urlencoded</li>\n<li>mutipart&#x2F;form-data</li>\n</ul>\n<h4 id=\"1-2-3-HTTP-请求体\"><a href=\"#1-2-3-HTTP-请求体\" class=\"headerlink\" title=\"1.2.3 HTTP 请求体\"></a>1.2.3 HTTP 请求体</h4><blockquote>\n<p>Request-body</p>\n<p>body-parameters</p>\n</blockquote>\n<p>请求体就是请求下面的空白行下面的内容。常配合的请求头有上面讲的Content-Type，标明请求体的类型。还有Content-Length，标明请求体的长度。</p>\n<ul>\n<li>请求报文可以没有请求体</li>\n</ul>\n<h4 id=\"1-2-4-HTTP-响应-状态行\"><a href=\"#1-2-4-HTTP-响应-状态行\" class=\"headerlink\" title=\"1.2.4 HTTP 响应 - 状态行\"></a>1.2.4 HTTP 响应 - 状态行</h4><p>处于响应数据第一行。用于描述服务器处理结果</p>\n<p>格式：【协议版本号】【状态码】【状态消息】</p>\n<p>状态码：三位数字</p>\n<ul>\n<li>1xx: 指示信息</li>\n<li>2xx: 成功</li>\n<li>3xx: 重定向</li>\n<li>4xx: 客户端错误</li>\n<li>5xx: 服务端错误</li>\n</ul>\n<h4 id=\"1-2-5-HTTP-响应-响应头\"><a href=\"#1-2-5-HTTP-响应-响应头\" class=\"headerlink\" title=\"1.2.5 HTTP 响应 - 响应头\"></a>1.2.5 HTTP 响应 - 响应头</h4><p>和请求头的位置一样。用于描述客户端想要的一些附加信息。同样由键值对组成</p>\n<h4 id=\"1-2-6-HTTP-响应-响应体\"><a href=\"#1-2-6-HTTP-响应-响应体\" class=\"headerlink\" title=\"1.2.6 HTTP 响应 - 响应体\"></a>1.2.6 HTTP 响应 - 响应体</h4><p>和请求体位置一样。数据类型类似。是服务器返回的数据实体。</p>\n<h2 id=\"2-Charles\"><a href=\"#2-Charles\" class=\"headerlink\" title=\"2. Charles\"></a>2. Charles</h2><blockquote>\n<p>下载地址：<a href=\"https://www.charlesproxy.com/download/\">https://www.charlesproxy.com/download/</a></p>\n<p>激活：<a href=\"https://www.zzzmode.com/mytools/charles/\">https://www.zzzmode.com/mytools/charles/</a></p>\n</blockquote>\n<h3 id=\"2-1-什么是Charles\"><a href=\"#2-1-什么是Charles\" class=\"headerlink\" title=\"2.1 什么是Charles\"></a>2.1 什么是Charles</h3><p>Charles，是一个基于<strong>HTTP协议</strong>的代理服务器。通过成为电脑或者是浏览器的代理，从而<strong>截取请求和请求结果</strong>，以达到抓包分析的目的。</p>\n<h3 id=\"2-2-Charles-工作流程\"><a href=\"#2-2-Charles-工作流程\" class=\"headerlink\" title=\"2.2 Charles 工作流程\"></a>2.2 Charles 工作流程</h3><p>Charles的工作流程，其实就是在主机和互联网之间，加一个代理服务器。主机发送请求的时候，先发到charles上，由charles转发给服务器。接受时候同理。</p>\n<h3 id=\"2-3-Charles功能\"><a href=\"#2-3-Charles功能\" class=\"headerlink\" title=\"2.3 Charles功能\"></a>2.3 Charles功能</h3><ul>\n<li>支持HTTP和HTTPS代理</li>\n<li>支持<strong>流量控制</strong>（弱网环境）</li>\n<li>支持接口<strong>并发</strong>请求</li>\n<li>支持<strong>重发网络请求</strong></li>\n<li>支持断点调试（构建异常的测试场景）</li>\n</ul>\n<h3 id=\"2-4-补票\"><a href=\"#2-4-补票\" class=\"headerlink\" title=\"2.4 补票\"></a>2.4 补票</h3><h2 id=\"3-接口规范\"><a href=\"#3-接口规范\" class=\"headerlink\" title=\"3. 接口规范\"></a>3. 接口规范</h2><h3 id=\"3-1-传统接口风格\"><a href=\"#3-1-传统接口风格\" class=\"headerlink\" title=\"3.1 传统接口风格\"></a>3.1 传统接口风格</h3><p>URL体现了业务增删改查操作。</p>\n<p><a href=\"http://localhost/user/getAllUsers\">http://localhost:80/user/getAllUsers</a></p>\n<p><a href=\"https://localhost:80/deleteUser?id=1\">https://localhost:80/deleteUser?id=1</a></p>\n<p>这种就是传统的接口</p>\n<h3 id=\"3-2-RESTful接口风格\"><a href=\"#3-2-RESTful接口风格\" class=\"headerlink\" title=\"3.2 RESTful接口风格\"></a>3.2 RESTful接口风格</h3><p>URL中只<strong>定义了需要操作的对象</strong>。</p>\n<p><a href=\"https://localhost:80/app/users/1\">https://localhost:80/app/users/1</a> : 操作user集合的中编号为1的对象。</p>\n<ul>\n<li><p>请求API的URL用来定位<strong>资源</strong>（也就是对象）。</p>\n</li>\n<li><p>通过HTTP请求方式，来对资源进行增删改查操作。</p>\n<ul>\n<li>查：GET</li>\n<li>增：POST</li>\n<li>改：PUT</li>\n<li>删：DELETE</li>\n</ul>\n</li>\n<li><p>状态码遵循HTTP状态码协议。</p>\n</li>\n</ul>\n<h2 id=\"4-业务流程-vs-单个模块\"><a href=\"#4-业务流程-vs-单个模块\" class=\"headerlink\" title=\"4. 业务流程 vs 单个模块\"></a>4. 业务流程 vs 单个模块</h2><p>拿到一个项目后，<strong>先测试</strong>业务流程，确保<strong>核心功能</strong>正常。</p>\n<h3 id=\"4-1-如何设计业务流程测试用例\"><a href=\"#4-1-如何设计业务流程测试用例\" class=\"headerlink\" title=\"4.1 如何设计业务流程测试用例\"></a>4.1 如何设计业务流程测试用例</h3><ol>\n<li>根据流程图，找业务路径</li>\n<li>根据业务路径分析对应的接口请求</li>\n<li>将业务路径转化为接口测试用例</li>\n</ol>\n<ul>\n<li>找出现问题的点。正常通过的只用测一次（一路走到底）</li>\n</ul>\n<p>因此，对于下面这个新增合同业务，我们可以设计出以下用例：</p>\n<p><img src=\"/../img/image-20231012013204347.png\" alt=\"image-20231012013204347\"></p>\n<ol>\n<li>合同新增成功：登录（成功）-&gt; 添加课程（成功）-&gt; 上传合同（成功）-&gt; 新增合同（成功</li>\n<li>合同新增失败（登录失败）</li>\n<li>合同新增失败 （添加课程失败）：登陆（成功）</li>\n<li>合同新增失败 （上传合同失败）：登录（成功）-&gt; 添加课程（成功）</li>\n<li>合同新增失败 （新增合同失败）：登录（成功）-&gt; 添加课程（成功）-&gt; 上传合同（成功）</li>\n</ol>\n<h2 id=\"5-接口文档\"><a href=\"#5-接口文档\" class=\"headerlink\" title=\"5. 接口文档\"></a>5. 接口文档</h2><blockquote>\n<p>接口API文档一般由后端开发编写，用于描述接口信息。</p>\n<p><img src=\"/../img/image-20231012015303012.png\" alt=\"image-20231012015303012\"></p>\n</blockquote>\n<p>对于接口测试来讲，主要就是分析接口文档中的三点：</p>\n<ol>\n<li>接口之间的依赖关系</li>\n<li>接口请求（URL，请求方法，请求头，请求参数类型，请求参数）</li>\n<li>接口响应（状态码，响应信息）</li>\n</ol>\n<ul>\n<li>基本就是跟着接口文档，在测试用例里面复制黏贴就行。接口文档里没写的，测试用例里用“&#x2F;”占位。</li>\n</ul>\n<p><img src=\"/../img/image-20231012020112675.png\" alt=\"image-20231012020112675\"></p>\n<h2 id=\"6-Postman\"><a href=\"#6-Postman\" class=\"headerlink\" title=\"6. Postman\"></a>6. Postman</h2><blockquote>\n<p>一款接口调试工具</p>\n</blockquote>\n<h3 id=\"6-1-Demo-验证码接口\"><a href=\"#6-1-Demo-验证码接口\" class=\"headerlink\" title=\"6.1 Demo:验证码接口\"></a>6.1 Demo:验证码接口</h3><p><strong>URL</strong>: <a href=\"http://kdtx-test.itheima.net/api/captchaImage\">http://kdtx-test.itheima.net/api/captchaImage</a></p>\n<ul>\n<li>设置请求方式 (GET)</li>\n<li>输入接口地址 (…)</li>\n<li>点击发送请求</li>\n<li>查看响应结果</li>\n</ul>\n<h3 id=\"6-2-Demo-登录接口\"><a href=\"#6-2-Demo-登录接口\" class=\"headerlink\" title=\"6.2 Demo: 登录接口\"></a>6.2 Demo: 登录接口</h3><p><strong>URL</strong>: <a href=\"http://kdtx-test.itheima.net/api/login\">http://kdtx-test.itheima.net/api/login</a> 方法： POST</p>\n<p><strong>请求头</strong>： Content-Type： application&#x2F;json</p>\n<p><strong>请求体</strong>： {“username”:”admin”, “password”:”HM_2023_test”,”code”:”2”,”uuid”:”验证码接口中uuid请求结果”}</p>\n<ul>\n<li>设置请求方式 (GET)</li>\n<li>输入接口地址 (…)</li>\n<li>点击发送请求</li>\n<li>查看响应结果</li>\n</ul>\n<hr>\n<p><strong>问题</strong>： 每次使用登录接口，都需要<strong>手动</strong>复制验证码接口的返回结果，很麻烦</p>\n<p>Postman为我们提供了一个<strong>公共容器</strong>，用于保存相关联的数据。</p>\n<h3 id=\"6-3-环境变量\"><a href=\"#6-3-环境变量\" class=\"headerlink\" title=\"6.3 环境变量\"></a>6.3 环境变量</h3><p><img src=\"/../img/image-20231012150414097.png\" alt=\"image-20231012150414097\"></p>\n<h4 id=\"6-3-1-通过javascript操作响应json，并存入环境变量\"><a href=\"#6-3-1-通过javascript操作响应json，并存入环境变量\" class=\"headerlink\" title=\"6.3.1 通过javascript操作响应json，并存入环境变量\"></a>6.3.1 通过javascript操作响应json，并存入环境变量</h4><p>Postman<strong>内置Test</strong>，可以运行Javascript。通过这一点，可以动态地获取并保存环境变量</p>\n<h5 id=\"6-3-1-1-Demo1-将获取验证码时的uuid存入环境变量，并在登录时填写到requestBody中\"><a href=\"#6-3-1-1-Demo1-将获取验证码时的uuid存入环境变量，并在登录时填写到requestBody中\" class=\"headerlink\" title=\"6.3.1.1 Demo1: 将获取验证码时的uuid存入环境变量，并在登录时填写到requestBody中\"></a>6.3.1.1 Demo1: 将获取验证码时的uuid存入环境变量，并在登录时填写到requestBody中</h5><p><img src=\"/../img/image-20231012152302176.png\" alt=\"image-20231012152302176\"></p>\n<p><img src=\"/../img/image-20231012152314404.png\" alt=\"image-20231012152314404\"></p>\n<h5 id=\"6-3-1-1-Demo-将登录成功后的token存入环境变量，并在添加课程时候填入-RequestHeader中。\"><a href=\"#6-3-1-1-Demo-将登录成功后的token存入环境变量，并在添加课程时候填入-RequestHeader中。\" class=\"headerlink\" title=\"6.3.1.1 Demo: 将登录成功后的token存入环境变量，并在添加课程时候填入 RequestHeader中。\"></a>6.3.1.1 Demo: 将登录成功后的token存入环境变量，并在添加课程时候填入 RequestHeader中。</h5><p><img src=\"/../img/image-20231012175222772.png\" alt=\"image-20231012175222772\"></p>\n<p><img src=\"/../img/image-20231012175230820.png\" alt=\"image-20231012175230820\"></p>\n<h3 id=\"6-4-处理mutipart-form-data数据\"><a href=\"#6-4-处理mutipart-form-data数据\" class=\"headerlink\" title=\"6.4 处理mutipart&#x2F;form-data数据\"></a>6.4 处理mutipart&#x2F;form-data数据</h3><p>接口可能会这样子写</p>\n<p><img src=\"/../img/image-20231013020924815.png\" alt=\"image-20231013020924815\"></p>\n<p>这时候请求体类型就得是form-data类型了。Key看文档，file看文档文件路径。</p>\n<p><img src=\"/../img/image-20231013021007971.png\" alt=\"image-20231013021007971\"></p>\n<p>这里上传接口又依赖登录接口请求成功后，返回的token。因此，需要在登录接口中将token存入环境变量</p>\n<p><img src=\"/../img/image-20231013021122908.png\" alt=\"image-20231013021122908\"></p>\n<p>并在上传接口的Request-Headers，添加Authorization：</p>\n<h3 id=\"6-5-Postman中的Request-Param\"><a href=\"#6-5-Postman中的Request-Param\" class=\"headerlink\" title=\"6.5 Postman中的Request Param\"></a>6.5 Postman中的Request Param</h3><p><img src=\"/../img/image-20231013224552169.png\" alt=\"image-20231013224552169\"></p>\n<h3 id=\"6-6-批量执行\"><a href=\"#6-6-批量执行\" class=\"headerlink\" title=\"6.6 批量执行\"></a>6.6 批量执行</h3><blockquote>\n<p>这些合同查询、上传、新增操作，都依赖于登录时候提供的token进行鉴权。问题是，用户登录是会过期的。我们不可能每次要去进行操作，都手动把每个接口的流程走一遍，因此，postman提供了批量执行测试用例。</p>\n</blockquote>\n<p><img src=\"/../img/image-20231013230802520.png\" alt=\"image-20231013230802520\"></p>\n<h2 id=\"7-设计接口用例\"><a href=\"#7-设计接口用例\" class=\"headerlink\" title=\"7. 设计接口用例\"></a>7. 设计接口用例</h2><p>对于 <strong>单接口测试</strong>，设计思路通常分为两类： <strong>正向测试</strong>和<strong>逆向（反向）测试</strong></p>\n<h3 id=\"7-1-正向测试\"><a href=\"#7-1-正向测试\" class=\"headerlink\" title=\"7.1 正向测试\"></a>7.1 正向测试</h3><p>包含： </p>\n<ul>\n<li>必填参数 P2</li>\n<li>全部参数 p2</li>\n</ul>\n<h3 id=\"7-2-逆向测试\"><a href=\"#7-2-逆向测试\" class=\"headerlink\" title=\"7.2 逆向测试\"></a>7.2 逆向测试</h3><p>包含：</p>\n<ul>\n<li>参数数据为空 p3</li>\n<li>参数类型不符 p3</li>\n<li>参数长度不符 p3</li>\n<li>业务规则不符 p3</li>\n</ul>\n<p>正向测试的优先级<strong>永远高于</strong>逆向测试</p>\n<p>逆向测试可以理解成<strong>对正向测试里的参数的对立面进行测试</strong></p>\n<p>e.g. 登录接口测试用例</p>\n<p><img src=\"/../img/image-20231014014917998.png\" alt=\"image-20231014014917998\"></p>\n<h3 id=\"7-3-Postman按模块管理测试用例\"><a href=\"#7-3-Postman按模块管理测试用例\" class=\"headerlink\" title=\"7.3 Postman按模块管理测试用例\"></a>7.3 Postman按模块管理测试用例</h3><p><img src=\"/../img/image-20231014020213977.png\" alt=\"image-20231014020213977\"></p>\n<p>按照上面的箭头，先在Collection中创建folder，然后再folder中创建对应接口的request测试用例。</p>\n<p>下面是对于<strong>登录接口</strong>的<strong>用户名</strong>设计的<strong>三个</strong>正向和反向测试用例</p>\n<p><img src=\"/../img/image-20231014020042107.png\" alt=\"image-20231014020042107\"></p>\n<h4 id=\"补票：Postman断言\"><a href=\"#补票：Postman断言\" class=\"headerlink\" title=\"补票：Postman断言\"></a>补票：Postman断言</h4><blockquote>\n<p>Postman提供了test()方法，用于自动地检测response中的结果是否与预期结果一致。</p>\n</blockquote>\n<p>常用断言包括：</p>\n<ul>\n<li><p>响应状态码(Status code)</p>\n<p><img src=\"/../img/image-20231014020902573.png\" alt=\"image-20231014020902573\"></p>\n<p>**直接点击对应snippet就会自动再Tests编辑区域生成 **</p>\n</li>\n<li><p>响应包含指定字符串 (Contains string)</p>\n</li>\n<li><p>JSON断言（JSON value check)</p>\n<p>写完之后发送下，如果符合预期结果的话，应该是绿色。</p>\n</li>\n</ul>\n<p><img src=\"/../img/image-20231014022802984.png\" alt=\"image-20231014022802984\"></p>\n<h4 id=\"补票：Postman参数化\"><a href=\"#补票：Postman参数化\" class=\"headerlink\" title=\"补票：Postman参数化\"></a>补票：Postman参数化</h4><blockquote>\n<p>从上面的断言例子可以看出。如果对同一接口进行正反向测试时候，每次测试都需要将Tests内的代码或者是headers、body中的值进行复制黏贴。很麻烦。因此，postman提供了参数化，可以直接准备好的数据文件中，读取数据</p>\n</blockquote>\n<p>步骤：</p>\n<ol>\n<li><p>准备数据文件</p>\n</li>\n<li><p>引用数据文件数据</p>\n<p>headers、body：</p>\n<p>代码：data.key</p>\n</li>\n<li><p>在<strong>批量执行</strong>的页面，select file选择数据文件。</p>\n</li>\n</ol>\n<p>JSON数据格式：</p>\n<pre><code class=\"json\">[\n    &#123;&quot;username&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;HM_2023_test&quot;, &quot;status&quot;:&quot;200&quot;, &quot;contain_message&quot;:&quot;作成功&quot;, &quot;msg&quot;: &quot;操作成功&quot;&#125;,\n    &#123;&quot;username&quot;:&quot;&quot;, &quot;password&quot;:&quot;HM_2023_test&quot;, &quot;status&quot;:&quot;500&quot;, &quot;contain_message&quot;:&quot;作成功&quot;, &quot;msg&quot;: &quot;用户不存在/密码错误&quot;&#125;,\n    &#123;&quot;username&quot;:&quot;admin1&quot;, &quot;password&quot;:&quot;HM_2023_test&quot;, &quot;status&quot;:&quot;500&quot;, &quot;contain_message&quot;:&quot;作成功&quot;, &quot;msg&quot;: &quot;用户不存在/密码错误&quot;&#125;\n]\n</code></pre>\n<p><img src=\"/../img/image-20231014034148547.png\" alt=\"image-20231014034148547\"></p>\n<p>注意，在编写json数据时，务必看好接口文档里的参数类型。如果是string类型则不要忘了双引号。如果是数字类型则不用双引号。</p>\n<p>这里，如果将”status”设为String类型的”200”，则会导致测试用例无法通过。</p>\n<p>如图：</p>\n<p><img src=\"/../img/image-20231014034455018.png\" alt=\"image-20231014034455018\"></p>\n<p><img src=\"/../img/image-20231014034510599.png\" alt=\"image-20231014034510599\"></p>\n<blockquote>\n<p>下面的用例，有时间可以往postman里填下，练练手。重要的还是看怎么设计用例。填数据没难度。</p>\n</blockquote>\n<h4 id=\"7-3-1-Demo-课程添加接口的用例设计\"><a href=\"#7-3-1-Demo-课程添加接口的用例设计\" class=\"headerlink\" title=\"7.3.1 Demo: 课程添加接口的用例设计\"></a>7.3.1 Demo: 课程添加接口的用例设计</h4><p><img src=\"/../img/image-20231014040059430.png\" alt=\"image-20231014040059430\"></p>\n<p>因为这个接口依赖于登录成功后返回的token，因此，正向中的两个用例需要补充一下说明：是在登录成功的前提下,进行…..。同理，逆向中，还需要添加一条测试用例：<img src=\"/../img/image-20231014040254573.png\" alt=\"image-20231014040254573\"></p>\n<h4 id=\"7-3-2-课程查询接口的用例设计\"><a href=\"#7-3-2-课程查询接口的用例设计\" class=\"headerlink\" title=\"7.3.2 课程查询接口的用例设计\"></a>7.3.2 课程查询接口的用例设计</h4><p><img src=\"/../img/image-20231014054102698.png\" alt=\"image-20231014054102698\"></p>\n<blockquote>\n<p>对应的用例文档</p>\n</blockquote>\n<p><img src=\"/../img/image-20231014054644739.png\" alt=\"image-20231014054644739\"></p>\n<p><img src=\"/../img/image-20231014054559197.png\" alt=\"image-20231014054559197\"></p>\n<h4 id=\"7-3-3-课程修改接口用例设计\"><a href=\"#7-3-3-课程修改接口用例设计\" class=\"headerlink\" title=\"7.3.3 课程修改接口用例设计\"></a>7.3.3 课程修改接口用例设计</h4><p><img src=\"/../img/image-20231014055926821.png\" alt=\"image-20231014055926821\"></p>\n<p><img src=\"/../img/image-20231014060539030.png\" alt=\"image-20231014060539030\"></p>\n<h4 id=\"7-3-4-课程删除接口测试用例设计\"><a href=\"#7-3-4-课程删除接口测试用例设计\" class=\"headerlink\" title=\"7.3.4 课程删除接口测试用例设计\"></a>7.3.4 课程删除接口测试用例设计</h4><p><img src=\"/../img/image-20231014061221536.png\" alt=\"image-20231014061221536\"></p>\n<p><img src=\"/../img/image-20231014061610452.png\" alt=\"image-20231014061610452\"></p>\n<p>这里的id是<strong>路径参数</strong></p>\n<h5 id=\"7-3-4-1-路径参数\"><a href=\"#7-3-4-1-路径参数\" class=\"headerlink\" title=\"7.3.4.1 路径参数\"></a>7.3.4.1 路径参数</h5><blockquote>\n<p>PathVariable</p>\n</blockquote>\n<p>URL中<strong>末尾一级</strong>的参数</p>\n<p>如： <a href=\"http://kdtx-test.itheima.net/api/clues/course/111\">http://kdtx-test.itheima.net/api/clues/course/111</a></p>\n<p>在Postman中有两种方式添加Path Variable。第一种就是<strong>直接在url中添加</strong>，第二种是<strong>url末尾加</strong><code>:id</code></p>\n<p><img src=\"/../img/image-20231014061840143.png\" alt=\"image-20231014061840143\"></p>\n<p>以上内容为接口测试的基础理论与样例。下面是使用TestNG</p>\n<hr>\n","text":"1. 回顾1.1 URLURL： 统一资源定位符 格式： 协议:&#x2F;&#x2F;hostname:port&#x2F;path?参数&#x3D;值&am...","permalink":"/post/接口自动化","photos":[],"count_time":{"symbolsCount":"5.1k","symbolsTime":"5 mins."},"categories":[{"name":"软件测试","slug":"软件测试","count":4,"path":"api/categories/软件测试.json"}],"tags":[{"name":"软件测试","slug":"软件测试","count":2,"path":"api/tags/软件测试.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">1. 回顾</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-URL\"><span class=\"toc-text\">1.1 URL</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-HTTP-HTTPS\"><span class=\"toc-text\">1.2 HTTP &#x2F; HTTPS</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-1-HTTP-%E8%AF%B7%E6%B1%82%E8%A1%8C\"><span class=\"toc-text\">1.2.1 HTTP 请求行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-2-HTTP-%E8%AF%B7%E6%B1%82%E5%A4%B4\"><span class=\"toc-text\">1.2.2 HTTP 请求头</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-3-HTTP-%E8%AF%B7%E6%B1%82%E4%BD%93\"><span class=\"toc-text\">1.2.3 HTTP 请求体</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-4-HTTP-%E5%93%8D%E5%BA%94-%E7%8A%B6%E6%80%81%E8%A1%8C\"><span class=\"toc-text\">1.2.4 HTTP 响应 - 状态行</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-5-HTTP-%E5%93%8D%E5%BA%94-%E5%93%8D%E5%BA%94%E5%A4%B4\"><span class=\"toc-text\">1.2.5 HTTP 响应 - 响应头</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-2-6-HTTP-%E5%93%8D%E5%BA%94-%E5%93%8D%E5%BA%94%E4%BD%93\"><span class=\"toc-text\">1.2.6 HTTP 响应 - 响应体</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Charles\"><span class=\"toc-text\">2. Charles</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-1-%E4%BB%80%E4%B9%88%E6%98%AFCharles\"><span class=\"toc-text\">2.1 什么是Charles</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-2-Charles-%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">2.2 Charles 工作流程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-Charles%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">2.3 Charles功能</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-4-%E8%A1%A5%E7%A5%A8\"><span class=\"toc-text\">2.4 补票</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83\"><span class=\"toc-text\">3. 接口规范</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E4%BC%A0%E7%BB%9F%E6%8E%A5%E5%8F%A3%E9%A3%8E%E6%A0%BC\"><span class=\"toc-text\">3.1 传统接口风格</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-RESTful%E6%8E%A5%E5%8F%A3%E9%A3%8E%E6%A0%BC\"><span class=\"toc-text\">3.2 RESTful接口风格</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B-vs-%E5%8D%95%E4%B8%AA%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\">4. 业务流程 vs 单个模块</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B\"><span class=\"toc-text\">4.1 如何设计业务流程测试用例</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3\"><span class=\"toc-text\">5. 接口文档</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-Postman\"><span class=\"toc-text\">6. Postman</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-Demo-%E9%AA%8C%E8%AF%81%E7%A0%81%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">6.1 Demo:验证码接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-2-Demo-%E7%99%BB%E5%BD%95%E6%8E%A5%E5%8F%A3\"><span class=\"toc-text\">6.2 Demo: 登录接口</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-3-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">6.3 环境变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-3-1-%E9%80%9A%E8%BF%87javascript%E6%93%8D%E4%BD%9C%E5%93%8D%E5%BA%94json%EF%BC%8C%E5%B9%B6%E5%AD%98%E5%85%A5%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">6.3.1 通过javascript操作响应json，并存入环境变量</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-3-1-1-Demo1-%E5%B0%86%E8%8E%B7%E5%8F%96%E9%AA%8C%E8%AF%81%E7%A0%81%E6%97%B6%E7%9A%84uuid%E5%AD%98%E5%85%A5%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B9%B6%E5%9C%A8%E7%99%BB%E5%BD%95%E6%97%B6%E5%A1%AB%E5%86%99%E5%88%B0requestBody%E4%B8%AD\"><span class=\"toc-text\">6.3.1.1 Demo1: 将获取验证码时的uuid存入环境变量，并在登录时填写到requestBody中</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#6-3-1-1-Demo-%E5%B0%86%E7%99%BB%E5%BD%95%E6%88%90%E5%8A%9F%E5%90%8E%E7%9A%84token%E5%AD%98%E5%85%A5%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%EF%BC%8C%E5%B9%B6%E5%9C%A8%E6%B7%BB%E5%8A%A0%E8%AF%BE%E7%A8%8B%E6%97%B6%E5%80%99%E5%A1%AB%E5%85%A5-RequestHeader%E4%B8%AD%E3%80%82\"><span class=\"toc-text\">6.3.1.1 Demo: 将登录成功后的token存入环境变量，并在添加课程时候填入 RequestHeader中。</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-4-%E5%A4%84%E7%90%86mutipart-form-data%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">6.4 处理mutipart&#x2F;form-data数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-5-Postman%E4%B8%AD%E7%9A%84Request-Param\"><span class=\"toc-text\">6.5 Postman中的Request Param</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-6-%E6%89%B9%E9%87%8F%E6%89%A7%E8%A1%8C\"><span class=\"toc-text\">6.6 批量执行</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-%E8%AE%BE%E8%AE%A1%E6%8E%A5%E5%8F%A3%E7%94%A8%E4%BE%8B\"><span class=\"toc-text\">7. 设计接口用例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-1-%E6%AD%A3%E5%90%91%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">7.1 正向测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-2-%E9%80%86%E5%90%91%E6%B5%8B%E8%AF%95\"><span class=\"toc-text\">7.2 逆向测试</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#7-3-Postman%E6%8C%89%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B\"><span class=\"toc-text\">7.3 Postman按模块管理测试用例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E7%A5%A8%EF%BC%9APostman%E6%96%AD%E8%A8%80\"><span class=\"toc-text\">补票：Postman断言</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A1%A5%E7%A5%A8%EF%BC%9APostman%E5%8F%82%E6%95%B0%E5%8C%96\"><span class=\"toc-text\">补票：Postman参数化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-1-Demo-%E8%AF%BE%E7%A8%8B%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">7.3.1 Demo: 课程添加接口的用例设计</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-2-%E8%AF%BE%E7%A8%8B%E6%9F%A5%E8%AF%A2%E6%8E%A5%E5%8F%A3%E7%9A%84%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">7.3.2 课程查询接口的用例设计</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-3-%E8%AF%BE%E7%A8%8B%E4%BF%AE%E6%94%B9%E6%8E%A5%E5%8F%A3%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">7.3.3 课程修改接口用例设计</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#7-3-4-%E8%AF%BE%E7%A8%8B%E5%88%A0%E9%99%A4%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1\"><span class=\"toc-text\">7.3.4 课程删除接口测试用例设计</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#7-3-4-1-%E8%B7%AF%E5%BE%84%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">7.3.4.1 路径参数</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Spring笔记","uid":"9fe79a5e2d58fcbcba8e87cdea7a0f13","slug":"Spring笔记","date":"2023-02-12T14:34:49.000Z","updated":"2023-11-08T23:11:26.282Z","comments":true,"path":"api/articles/Spring笔记.json","keywords":"Kangwei Zhu's Blog","cover":"/img/rice.jpg","text":"Spring复习笔记 Spring是开源的免费框架 轻量级、非入侵式的 IOC控制反转， AOP面向切面编程 是重点 支持事务，对框架·整合的指出 也是重点 总...","permalink":"/post/Spring笔记","photos":[],"count_time":{"symbolsCount":"14k","symbolsTime":"12 mins."},"categories":[{"name":"后端开发","slug":"后端开发","count":1,"path":"api/categories/后端开发.json"}],"tags":[{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"}],"author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}}},"next_post":{"title":"标签","uid":"62b3445507f5f3a5e4605095b5d2e37e","slug":"标签","date":"2022-09-01T22:02:36.000Z","updated":"2023-11-08T23:11:26.285Z","comments":true,"path":"api/articles/标签.json","keywords":"Kangwei Zhu's Blog","cover":null,"text":"","permalink":"/post/标签","photos":[],"count_time":{"symbolsCount":0,"symbolsTime":"1 mins."},"categories":[{"name":"Java基础","slug":"Java基础","count":3,"path":"api/categories/Java基础.json"},{"name":"Javascript基础","slug":"Java基础/Javascript基础","count":1,"path":"api/categories/Java基础/Javascript基础.json"},{"name":"后端开发","slug":"Java基础/Javascript基础/后端开发","count":1,"path":"api/categories/Java基础/Javascript基础/后端开发.json"},{"name":"前端开发","slug":"Java基础/Javascript基础/后端开发/前端开发","count":1,"path":"api/categories/Java基础/Javascript基础/后端开发/前端开发.json"},{"name":"软件测试","slug":"Java基础/Javascript基础/后端开发/前端开发/软件测试","count":1,"path":"api/categories/Java基础/Javascript基础/后端开发/前端开发/软件测试.json"},{"name":"OS","slug":"Java基础/Javascript基础/后端开发/前端开发/软件测试/OS","count":1,"path":"api/categories/Java基础/Javascript基础/后端开发/前端开发/软件测试/OS.json"},{"name":"数据库","slug":"Java基础/Javascript基础/后端开发/前端开发/软件测试/OS/数据库","count":1,"path":"api/categories/Java基础/Javascript基础/后端开发/前端开发/软件测试/OS/数据库.json"},{"name":"中间件","slug":"Java基础/Javascript基础/后端开发/前端开发/软件测试/OS/数据库/中间件","count":1,"path":"api/categories/Java基础/Javascript基础/后端开发/前端开发/软件测试/OS/数据库/中间件.json"},{"name":"算法","slug":"Java基础/Javascript基础/后端开发/前端开发/软件测试/OS/数据库/中间件/算法","count":1,"path":"api/categories/Java基础/Javascript基础/后端开发/前端开发/软件测试/OS/数据库/中间件/算法.json"}],"tags":[{"name":"Selenium","slug":"Selenium","count":2,"path":"api/tags/Selenium.json"},{"name":"Spring","slug":"Spring","count":2,"path":"api/tags/Spring.json"},{"name":"SpringBoot","slug":"SpringBoot","count":1,"path":"api/tags/SpringBoot.json"},{"name":"Mybatis(Plus)","slug":"Mybatis-Plus","count":1,"path":"api/tags/Mybatis-Plus.json"},{"name":"Mysql","slug":"Mysql","count":2,"path":"api/tags/Mysql.json"},{"name":"Redis","slug":"Redis","count":1,"path":"api/tags/Redis.json"},{"name":"Rabbitmq","slug":"Rabbitmq","count":1,"path":"api/tags/Rabbitmq.json"},{"name":"Kafka","slug":"Kafka","count":1,"path":"api/tags/Kafka.json"},{"name":"Docker","slug":"Docker","count":1,"path":"api/tags/Docker.json"},{"name":"K8s","slug":"K8s","count":1,"path":"api/tags/K8s.json"},{"name":"xxl-job","slug":"xxl-job","count":1,"path":"api/tags/xxl-job.json"},{"name":"Javascript基础","slug":"Javascript基础","count":1,"path":"api/tags/Javascript基础.json"},{"name":"Vue2","slug":"Vue2","count":1,"path":"api/tags/Vue2.json"},{"name":"React.js","slug":"React-js","count":1,"path":"api/tags/React-js.json"},{"name":"Electron.js","slug":"Electron-js","count":1,"path":"api/tags/Electron-js.json"},{"name":"Flutter","slug":"Flutter","count":1,"path":"api/tags/Flutter.json"}],"author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}}}}