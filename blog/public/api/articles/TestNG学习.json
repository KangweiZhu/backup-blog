{"title":"速通TestNG","uid":"c4b37ef49fa66d2e8dcfeb1e2c791dc4","slug":"TestNG学习","date":"2023-09-28T01:19:00.000Z","updated":"2023-11-08T23:11:26.282Z","comments":true,"path":"api/articles/TestNG学习.json","keywords":"Kangwei Zhu's Blog","cover":[],"content":"<h1 id=\"TestNG\"><a href=\"#TestNG\" class=\"headerlink\" title=\"TestNG\"></a>TestNG</h1><h2 id=\"1-TestNG官方文档：\"><a href=\"#1-TestNG官方文档：\" class=\"headerlink\" title=\"1. TestNG官方文档：\"></a>1. TestNG官方文档：</h2><blockquote>\n<p><a href=\"https://testng.org/doc/documentation-main.html\">https://testng.org/doc/documentation-main.html</a></p>\n</blockquote>\n<h2 id=\"2-什么是TestNG？\"><a href=\"#2-什么是TestNG？\" class=\"headerlink\" title=\"2. 什么是TestNG？\"></a>2. 什么是TestNG？</h2><blockquote>\n<p>TestNG 是一个测试框架。用于unit（单元测试）、integration（集成测试）、end to end（端到端测试）以及function testing（功能测试.</p>\n</blockquote>\n<ul>\n<li><p>NG: next generation</p>\n</li>\n<li><p>目前学习TestNG主要还是为了以下几点：</p>\n<ol>\n<li>批量进行测试用例管理和调度执行</li>\n<li>生成报告。</li>\n<li>结合PO设计模式进行Web自动化测试</li>\n</ol>\n</li>\n<li><p>博客： <a href=\"https://bbs.huaweicloud.com/blogs/300746\">https://bbs.huaweicloud.com/blogs/300746</a></p>\n</li>\n</ul>\n<h2 id=\"3-第一个Selenium-TestNG测试案例\"><a href=\"#3-第一个Selenium-TestNG测试案例\" class=\"headerlink\" title=\"3. 第一个Selenium + TestNG测试案例\"></a>3. 第一个Selenium + TestNG测试案例</h2><blockquote>\n<p>打开谷歌。在搜索栏填入信息，按下enter。</p>\n</blockquote>\n<p>其实写法和JUnit是完全一样的。</p>\n<pre><code class=\"java\">import org.openqa.selenium.By;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.testng.annotations.Test;\n\nimport java.time.Duration;\n\npublic class FirstTestNGDemo &#123;\n\n    @Test\n    public void firstTest() throws InterruptedException&#123;\n        WebDriver webDriver = new ChromeDriver();\n        webDriver.manage().window().maximize();;\n        webDriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n        webDriver.get(&quot;https://www.google.com&quot;);\n        webDriver.findElement(By.name(&quot;q&quot;)).sendKeys(&quot;www.anicaaz.com&quot;, Keys.ENTER);\n        Thread.sleep(5000);\n        webDriver.quit();\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"3-1-默认测试报告\"><a href=\"#3-1-默认测试报告\" class=\"headerlink\" title=\"3.1 默认测试报告\"></a>3.1 默认测试报告</h3><p><img src=\"/../img/image-20230928082013863.png\" alt=\"image-20230928082013863\"></p>\n<p><img src=\"/../img/image-20230928082103488.png\" alt=\"image-20230928082103488\"></p>\n<p>然后就能看到这个文件夹。里面这个emailable-report.html就是报告。</p>\n<p><img src=\"/../img/image-20230928082117273.png\" alt=\"image-20230928082117273\"></p>\n<h2 id=\"小问题：WebDriver成员变量\"><a href=\"#小问题：WebDriver成员变量\" class=\"headerlink\" title=\"小问题：WebDriver成员变量\"></a>小问题：WebDriver成员变量</h2><p>我们的测试类不可能永远只写一个方法。当存在多个方法时，我们想高效地利用WebDriver，比如保存WebDriver的状态，这样各个method就能衔接起来。</p>\n<p>举个例子:</p>\n<p>我们要测试登录qq账号以及发消息给好友。那第一个method就是登录。如果没有全局变量，那在登录里我们就要创建WebDriver对象，给url。登录method写完了，当写发消息时，我们得重新创建对象，给对应的url。很麻烦。有人说为什么不把两个方法和在一起，那样就太乱了。一个类不可能永远只写一个代码，这时候就需要将WebDriver设为成员变量。当你登录成功，那WebDriver就是跳转到好友列表时候的状态。这样就不用重新创WebDriver了</p>\n<blockquote>\n<p>当然这是当前阶段的小问题。之后不可能这么些，因为这样还是很乱，封装的力度不够。</p>\n</blockquote>\n<h2 id=\"4-TestNG-常用注解\"><a href=\"#4-TestNG-常用注解\" class=\"headerlink\" title=\"4. TestNG 常用注解\"></a>4. TestNG 常用注解</h2><blockquote>\n<p>常用after&#x2F;before Suite、class。after&#x2F;before Test用的都算少了</p>\n</blockquote>\n<p>下面有这么多，其实都大差不差。</p>\n<p>@Before一般用于测试<strong>环境准备</strong></p>\n<p>@After一般用于<strong>测试环境清理</strong></p>\n<p>那么，我们想，当我们进行测试的时候，打开浏览器这个动作，其实跟测试内容的关系不是很大，是不是就是测试环境的准备？因此，我们可以用@BeforeClass，将其封装起来。</p>\n<pre><code>...\n\nprivate WebDriver webDriver;\n@BeforeClass\npublic void openBrowser() &#123;\n    //窗口、等待...etc..\n    webDriver.getUrl();\n&#125;\n</code></pre>\n<h3 id=\"Test\"><a href=\"#Test\" class=\"headerlink\" title=\"@Test\"></a>@Test</h3><pre><code class=\"java\">import org.openqa.selenium.By;\nimport org.openqa.selenium.Keys;\nimport org.openqa.selenium.WebDriver;\nimport org.openqa.selenium.WebElement;\nimport org.openqa.selenium.chrome.ChromeDriver;\nimport org.testng.Assert;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\nimport java.time.Duration;\n\npublic class FindWebsite &#123;\n    private WebDriver webDriver;\n\n    @BeforeClass\n    public void openBrowser() &#123;\n        webDriver = new ChromeDriver();\n        webDriver.manage().window().maximize();\n        webDriver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));\n    &#125;\n\n    //搜索www.anicaaz.com, 并判断第一条结果是否为“Kangwei Zhu&#39;s Blog: 首页”\n    @Test (priority = 1)\n    public void searchAnicaa() throws InterruptedException &#123;\n        webDriver.get(&quot;https://www.google.com&quot;);\n        webDriver.findElement(By.name(&quot;q&quot;)).sendKeys(&quot;www.anicaaz.com&quot;, Keys.ENTER);\n        System.out.println(webDriver.getTitle());\n        WebElement element = webDriver.findElement(By.xpath(&quot;//*[@id=\\&quot;rso\\&quot;]/div[1]/div/div/div[1]/div/div/span/a/h3&quot;));\n        String text = element.getText();\n        Assert.assertEquals(text, &quot;Kangwei Zhu&#39;s Blog: 首页&quot;);\n    &#125;\n\n    //跳转到www.anicaaz.com\n    @Test (priority = 2)\n    public void goToWebsite() throws InterruptedException &#123;\n        System.out.println(webDriver.getCurrentUrl());\n        webDriver.findElement(By.xpath(&quot;//*[@id=\\&quot;rso\\&quot;]/div[1]/div/div/div[1]/div/div/span/a/h3&quot;)).click();\n    &#125;\n\n    @AfterClass\n    public void quitBrowser() &#123;\n        webDriver.close();\n    &#125;\n&#125;\n</code></pre>\n<p>在这个demo中，我们有两个<strong>连续</strong>的方法。搜索某网站时，肯定是先输入搜索内容，然后在从搜索结果里点击内容。但是，由于抢占问题，搜索结果这个步骤可能会优先执行，这样永远都是报错。因此，我们可以设置优先级。优先级默认值为0。优先级可以作用在类上，也可以作用在方法上。</p>\n<p>如果你的测试不仅仅只是测试能否访问网页，可能还有别的目的的话，记得用Assert。因为可能网页跑通了，testng就认为你通过测试了，但是你的功能其实是有问题的。</p>\n<p>此外，涉及到网页跳转的场景时，要注意别忘了隐式&#x2F;显示等待。因为网页加载需要时间。有时候可能脚本执行得比加载速度快，从而导致找不到元素。</p>\n<h3 id=\"BeforeMethod\"><a href=\"#BeforeMethod\" class=\"headerlink\" title=\"@BeforeMethod\"></a>@BeforeMethod</h3><p>每个测试方法之前需要执行</p>\n<h3 id=\"AfterMethod\"><a href=\"#AfterMethod\" class=\"headerlink\" title=\"@AfterMethod\"></a>@AfterMethod</h3><p>每个测试方法之后需要执行</p>\n<h3 id=\"BeforeClass\"><a href=\"#BeforeClass\" class=\"headerlink\" title=\"@BeforeClass\"></a>@BeforeClass</h3><p>在当前类的第一个测试方法调用之前执行</p>\n<h3 id=\"AfterClass\"><a href=\"#AfterClass\" class=\"headerlink\" title=\"@AfterClass\"></a>@AfterClass</h3><p>在当前类的最后一个测试方法调用之后执行</p>\n<h3 id=\"BeforeTest\"><a href=\"#BeforeTest\" class=\"headerlink\" title=\"@BeforeTest\"></a>@BeforeTest</h3><p>在当前类的第一个测试方法调用之前执行</p>\n<h3 id=\"AfterTest\"><a href=\"#AfterTest\" class=\"headerlink\" title=\"@AfterTest\"></a>@AfterTest</h3><p>在测试之后需要执行的</p>\n<h3 id=\"BeforeSuite\"><a href=\"#BeforeSuite\" class=\"headerlink\" title=\"@BeforeSuite\"></a>@BeforeSuite</h3><p>在测试之前需要执行的</p>\n<h3 id=\"AfterSuite\"><a href=\"#AfterSuite\" class=\"headerlink\" title=\"@AfterSuite\"></a>@AfterSuite</h3><p>测试套件在执行之后需要执行的</p>\n<p>第二个demo：</p>\n<p>class1: 测试能否登录功能（这里选择谷歌账号）。</p>\n<p>class2： 测试能否获取个人信息。</p>\n<p>在这里，如果没有登录。是拿不到个人信息的。因为class2的运行会一直卡在登录页面（class2的<code>webDriver.get()</code>内参数是登录之后的主页url）。</p>\n<p>要解决这个问题，就需要将class1中的WebDriver设为public static变量，方便调用。但是问题来了。你执行class2的时候，class1不可能一起执行啊。</p>\n<pre><code class=\"java\">class1：\n    private static WebDrvier webDriver;\n\nclass2:\n    private WebDriver webDriver;\n    @BeforeClass\n    public void openBrowser() &#123;\n        webDriver = class1.webDriver;\n    &#125;\n    \n    ..\n</code></pre>\n<p>因此WebDriver就变成了空指针。这时候，就需要用到suite来管理这些类了。</p>\n<p>在TestNG中，最好一个类管理一个测试用例(具体还是看测试用例有多少），所有类（测试用例），则用suite管理。下面5.1.2会写道。</p>\n<h2 id=\"5-TestNG-XML文件\"><a href=\"#5-TestNG-XML文件\" class=\"headerlink\" title=\"5. TestNG XML文件\"></a>5. TestNG XML文件</h2><h3 id=\"1-1-TestNG-XML文件的作用\"><a href=\"#1-1-TestNG-XML文件的作用\" class=\"headerlink\" title=\"1.1 TestNG XML文件的作用\"></a>1.1 TestNG XML文件的作用</h3><p>XML是用来写配置的，TestNG的xml也不例外。 </p>\n<p>在我们之前写过的所有demo中，每个测试类，大抵都只有一两个测试方法，我们只需要手动执行它。</p>\n<p>但是，在项目中，我们通常会有几百上千个类和方法，这种情况下，我们如何去执行，执行哪些，以什么顺序去执行这些测试方法，就成了问题。</p>\n<p>通过编写TestNG XML 文件，我们就可以很好的解决这个问题。</p>\n<h3 id=\"1-1-1-安装TestNG插件\"><a href=\"#1-1-1-安装TestNG插件\" class=\"headerlink\" title=\"1.1.1 安装TestNG插件\"></a>1.1.1 安装TestNG插件</h3><p>idea -&gt; plugin -&gt; 搜索create testng xml</p>\n<h3 id=\"1-2-编写TestNG-XML\"><a href=\"#1-2-编写TestNG-XML\" class=\"headerlink\" title=\"1.2 编写TestNG XML\"></a>1.2 编写TestNG XML</h3><p>xml名字任意，xml文件数量任意。但是通常命名为testng.xml</p>\n<p>xml得放在resources里面</p>\n<blockquote>\n<p>Testng管理层级：</p>\n<p>suite-&gt;test-&gt;class-&gt;method</p>\n</blockquote>\n<ul>\n<li><p>testng.xml骨架</p>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n\n&lt;suite&gt;\n    &lt;test&gt;\n        &lt;classes&gt;\n            &lt;class&gt;\n                &lt;methods&gt;\n                    \n                &lt;/methods&gt;\n            &lt;/class&gt;\n        &lt;/classes&gt;\n    &lt;/test&gt;\n&lt;/suite&gt;\n</code></pre>\n<p>当然，手写很麻烦，可以直接通过testng插件生成。</p>\n</li>\n</ul>\n<h3 id=\"1-3-XML-DEMO\"><a href=\"#1-3-XML-DEMO\" class=\"headerlink\" title=\"1.3 XML DEMO\"></a>1.3 XML DEMO</h3><p>改造一下findWebsite，创建两个类。一个findWebiste，查找并进入<a href=\"http://www.anicaaz.com.另一个类findblog,点击博客第一条./\">www.anicaaz.com.另一个类findBlog，点击博客第一条。</a></p>\n<p>FindWebsite改动</p>\n<p><img src=\"/../img/image-20230928213416192.png\" alt=\"image-20230928213416192\"></p>\n<pre><code class=\"java\">import org.openqa.selenium.By;\nimport org.openqa.selenium.WebDriver;\nimport org.testng.Assert;\nimport org.testng.annotations.AfterClass;\nimport org.testng.annotations.BeforeClass;\nimport org.testng.annotations.Test;\n\npublic class FindBlog &#123;\n\n    private WebDriver webDriver;\n\n\n    @BeforeClass\n    public void setWebDriver() &#123;\n        webDriver = FindWebsite.webDriver;\n    &#125;\n\n    @Test\n    public void findBlog() &#123;\n        webDriver.findElement(By.xpath(&quot;/html/body/div/div[1]/div[2]/div[4]/div/div[1]/div[1]/div/div[2]/a/h1&quot;)).click();\n        String text = webDriver.findElement(By.xpath(&quot;/html/body/div/div[1]/div[2]/div[4]/div/div[1]/div/h1&quot;)).getText();\n        Assert.assertEquals(text, &quot;速通TestNG&quot;);\n    &#125;\n\n    @AfterClass\n    public void closeWebDriver() &#123;\n        webDriver.close();\n    &#125;\n&#125;\n</code></pre>\n<pre><code class=\"xml\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;!DOCTYPE suite SYSTEM &quot;http://testng.org/testng-1.0.dtd&quot;&gt;\n&lt;suite name=&quot;All Test Suite&quot;&gt;\n    &lt;test verbose=&quot;2&quot; preserve-order=&quot;true&quot;\n          name=&quot;查找网站&quot;&gt;\n        &lt;classes&gt;\n            &lt;class name=&quot;FindWebsite&quot;&gt;\n                &lt;methods&gt;\n                    &lt;include name=&quot;searchAnicaa&quot;/&gt;\n                    &lt;include name=&quot;goToWebsite&quot;/&gt;\n                &lt;/methods&gt;\n            &lt;/class&gt;\n        &lt;/classes&gt;\n    &lt;/test&gt;\n    &lt;test verbose=&quot;2&quot; preserve-order=&quot;true&quot;\n          name=&quot;查找博客首页第一篇博客&quot;&gt;\n        &lt;classes&gt;\n            &lt;class name=&quot;FindBlog&quot;&gt;\n                &lt;methods&gt;\n                    &lt;include name=&quot;findBlog&quot;/&gt;\n                &lt;/methods&gt;\n            &lt;/class&gt;\n        &lt;/classes&gt;\n    &lt;/test&gt;\n&lt;/suite&gt;\n</code></pre>\n<p><img src=\"/../img/image-20230928213811991.png\" alt=\"image-20230928213811991\"></p>\n<p>把Assert内容随便乱改点，就可以看到成功的报错了。</p>\n<p><img src=\"/../img/image-20230928213734939.png\" alt=\"image-20230928213734939\"></p>\n<h2 id=\"6-PO模式与TestNG\"><a href=\"#6-PO模式与TestNG\" class=\"headerlink\" title=\"6. PO模式与TestNG\"></a>6. PO模式与TestNG</h2><p>其实就是把页面当成一个对象来看。一个类，对应一个页面。</p>\n<p>PO： Page Object</p>\n<p>抽象对象：</p>\n<ol>\n<li>属性： url 元素（元素定位表达式）</li>\n<li>方法： 业务流程操作。</li>\n</ol>\n<p>高内聚: 页面属性放一块</p>\n<p>低耦合：不同页面通过webDriver来传递</p>\n","text":"TestNG1. TestNG官方文档： https://testng.org/doc/documentation-main.html 2. 什么是TestNG...","permalink":"/post/TestNG学习","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"软件测试","slug":"软件测试","count":4,"path":"api/categories/软件测试.json"}],"tags":[{"name":"TestNG","slug":"TestNG","count":1,"path":"api/tags/TestNG.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#TestNG\"><span class=\"toc-text\">TestNG</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-TestNG%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3%EF%BC%9A\"><span class=\"toc-text\">1. TestNG官方文档：</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-%E4%BB%80%E4%B9%88%E6%98%AFTestNG%EF%BC%9F\"><span class=\"toc-text\">2. 什么是TestNG？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-%E7%AC%AC%E4%B8%80%E4%B8%AASelenium-TestNG%E6%B5%8B%E8%AF%95%E6%A1%88%E4%BE%8B\"><span class=\"toc-text\">3. 第一个Selenium + TestNG测试案例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-%E9%BB%98%E8%AE%A4%E6%B5%8B%E8%AF%95%E6%8A%A5%E5%91%8A\"><span class=\"toc-text\">3.1 默认测试报告</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E9%97%AE%E9%A2%98%EF%BC%9AWebDriver%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">小问题：WebDriver成员变量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-TestNG-%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">4. TestNG 常用注解</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Test\"><span class=\"toc-text\">@Test</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BeforeMethod\"><span class=\"toc-text\">@BeforeMethod</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AfterMethod\"><span class=\"toc-text\">@AfterMethod</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BeforeClass\"><span class=\"toc-text\">@BeforeClass</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AfterClass\"><span class=\"toc-text\">@AfterClass</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BeforeTest\"><span class=\"toc-text\">@BeforeTest</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AfterTest\"><span class=\"toc-text\">@AfterTest</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#BeforeSuite\"><span class=\"toc-text\">@BeforeSuite</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#AfterSuite\"><span class=\"toc-text\">@AfterSuite</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-TestNG-XML%E6%96%87%E4%BB%B6\"><span class=\"toc-text\">5. TestNG XML文件</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-TestNG-XML%E6%96%87%E4%BB%B6%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">1.1 TestNG XML文件的作用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-1-1-%E5%AE%89%E8%A3%85TestNG%E6%8F%92%E4%BB%B6\"><span class=\"toc-text\">1.1.1 安装TestNG插件</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-2-%E7%BC%96%E5%86%99TestNG-XML\"><span class=\"toc-text\">1.2 编写TestNG XML</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1-3-XML-DEMO\"><span class=\"toc-text\">1.3 XML DEMO</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-PO%E6%A8%A1%E5%BC%8F%E4%B8%8ETestNG\"><span class=\"toc-text\">6. PO模式与TestNG</span></a></li></ol></li></ol>","author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"Web自动化测试快速入门(Java + Selenium 4)","uid":"d6d38527940b56c092c8f8da1f15978f","slug":"Selenium学习","date":"2023-09-28T01:19:00.000Z","updated":"2023-11-08T23:11:26.282Z","comments":true,"path":"api/articles/Selenium学习.json","keywords":"Kangwei Zhu's Blog","cover":[],"text":"1. Selenium官方文档 https://www.selenium.dev/documentation/ 2. 第一个Selenium测试案例使用idea...","permalink":"/post/Selenium学习","photos":[],"count_time":{"symbolsCount":"31k","symbolsTime":"28 mins."},"categories":[{"name":"软件测试","slug":"软件测试","count":4,"path":"api/categories/软件测试.json"}],"tags":[{"name":"Selenium","slug":"Selenium","count":2,"path":"api/tags/Selenium.json"}],"author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}}},"next_post":{"title":"连接远程数据库问题","uid":"24f094e932e9fa7c1ea3469108ff02c2","slug":"连接阿里云数据库问题","date":"2023-09-22T10:35:48.000Z","updated":"2023-11-08T23:11:26.285Z","comments":true,"path":"api/articles/连接阿里云数据库问题.json","keywords":"Kangwei Zhu's Blog","cover":null,"text":" 连接远程数据库时，datagrip报错：[HY000][1130] null, message from server: “Host ‘pool-100-1-...","permalink":"/post/连接阿里云数据库问题","photos":[],"count_time":{"symbolsCount":643,"symbolsTime":"1 mins."},"categories":[{"name":"数据库","slug":"数据库","count":1,"path":"api/categories/数据库.json"}],"tags":[{"name":"Mysql","slug":"Mysql","count":2,"path":"api/tags/Mysql.json"}],"author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}}}}