{"title":"Operting System Design -- CS416 Midterm 篇","uid":"32d2a70489e715ae35bf956ab6dd892e","slug":"OSD","date":"2023-10-29T05:11:23.000Z","updated":"2023-11-08T23:11:26.282Z","comments":true,"path":"api/articles/OSD.json","keywords":"Kangwei Zhu's Blog","cover":[],"content":"<h1 id=\"1-为什么要学习OSD？\"><a href=\"#1-为什么要学习OSD？\" class=\"headerlink\" title=\"1. 为什么要学习OSD？\"></a>1. 为什么要学习OSD？</h1><blockquote>\n<p>OS forms the foundation of modern computing</p>\n</blockquote>\n<ol>\n<li><p><strong>Abstractions</strong>: Modern Software 是如何使用 Hardware的？</p>\n</li>\n<li><p><strong>Resource Management</strong>： 如何去做 resource isolation？</p>\n</li>\n<li><p>如何在兼顾<strong>实现以上两点的同时</strong>，确保 <strong>High Performace</strong> ?</p>\n</li>\n</ol>\n<p>在这门课上，主要通过两种方式来学习OS</p>\n<ul>\n<li><ol>\n<li>Conceptual Learning</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>Intensive Programming</li>\n</ol>\n</li>\n</ul>\n<p>在笔记的书写中，很多时候并不能很好、贴切的翻译一些英文句子和词汇，所以就直接使用了来自课件、书上的原话。</p>\n<h1 id=\"2-OS-导论\"><a href=\"#2-OS-导论\" class=\"headerlink\" title=\"2. OS 导论\"></a>2. OS 导论</h1><p>OS, 是一个抽象（abstract）和 管理（manage）硬件资源的 <strong>软件</strong><br>从高到低排序： 用户 -&gt; 应用程序 -&gt; 操作系统 -&gt; 硬件</p>\n<p>本章将是这门课内容的导论。section 2以后的章节将对对于各个主题，进行更深层次的讨论和总结。</p>\n<h2 id=\"2-1-硬件\"><a href=\"#2-1-硬件\" class=\"headerlink\" title=\"2.1 硬件\"></a>2.1 硬件</h2><p>OS管理的硬件主要有</p>\n<ol>\n<li>memory： 基本实体都是DRAM,  对应OS中的Memory，使用malloc()作为memory controller, 来分配内存</li>\n<li>Disk：对应OS中的File System, 通过SATA传输，使用read()&#x2F;write() 进行控制</li>\n<li>Nework Adapter: 对应OS中的网络模块， 使用send()&#x2F;recv() 进行传输</li>\n</ol>\n<h2 id=\"2-2-OS提供了什么？\"><a href=\"#2-2-OS提供了什么？\" class=\"headerlink\" title=\"2.2 OS提供了什么？\"></a>2.2 OS提供了什么？</h2><ol>\n<li><p><strong>Software library (abstraction)</strong> between applications and hardware to make the hardware easier to use</p>\n<ul>\n<li>Simple, uniform view of diverse hardware devices</li>\n</ul>\n</li>\n<li><p><strong>Mechanisms and policies for resource management</strong>, to provision and isolate hardware across many applications</p>\n<ul>\n<li>Effective multi-tenant（多租户） and multi-application systems</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"2-3-Abstrction\"><a href=\"#2-3-Abstrction\" class=\"headerlink\" title=\"2.3 Abstrction\"></a>2.3 Abstrction</h2><h3 id=\"2-3-1-现代操作系统通常为哪些资源提供哪些抽象\"><a href=\"#2-3-1-现代操作系统通常为哪些资源提供哪些抽象\" class=\"headerlink\" title=\"2.3.1 现代操作系统通常为哪些资源提供哪些抽象?\"></a>2.3.1 现代操作系统通常为哪些资源提供哪些抽象?</h3><blockquote>\n<p>CPU：进程&#x2F;线程<br>内存：地址空间<br>存储：文件</p>\n</blockquote>\n<h3 id=\"2-3-2-操作系统提供抽象的好处？\"><a href=\"#2-3-2-操作系统提供抽象的好处？\" class=\"headerlink\" title=\"2.3.2 操作系统提供抽象的好处？\"></a>2.3.2 操作系统提供抽象的好处？</h3><blockquote>\n<p>允许应用程序重用公共资源<br>让不同的设备看起来相同 （内存、主板、硬盘）<br>提供更高级别或更有用的功能</p>\n</blockquote>\n<h3 id=\"2-3-3-挑战\"><a href=\"#2-3-3-挑战\" class=\"headerlink\" title=\"2.3.3 挑战\"></a>2.3.3 挑战</h3><ol>\n<li>What are the correct abstractions?</li>\n<li>How much of the hardware capabilities should be exposed?</li>\n</ol>\n<h2 id=\"2-4-System-Calls\"><a href=\"#2-4-System-Calls\" class=\"headerlink\" title=\"2.4 System Calls\"></a>2.4 System Calls</h2><ul>\n<li>系统调用允许用户告诉操作系统在硬件上执行什么操作</li>\n<li>操作系统提供标准软件接口 （API）</li>\n<li>典型的操作系统会导出几百个系统调用</li>\n<li>运行程序、访问内存、访问硬件设备……</li>\n</ul>\n<h2 id=\"2-5-Resource-Management\"><a href=\"#2-5-Resource-Management\" class=\"headerlink\" title=\"2.5 Resource Management\"></a>2.5 Resource Management</h2><blockquote>\n<p>Want fair and efficient use of hardware across applications</p>\n</blockquote>\n<h3 id=\"2-5-1-Advantages-of-OS-providing-resource-management\"><a href=\"#2-5-1-Advantages-of-OS-providing-resource-management\" class=\"headerlink\" title=\"2.5.1 Advantages of OS providing resource management:\"></a>2.5.1 Advantages of OS providing resource management:</h3><ol>\n<li>Protect applications from one another</li>\n<li>Provide efficient access to resources (cost, time, energy)</li>\n<li>Provide fair access to resources</li>\n</ol>\n<h3 id=\"2-5-2-Challenges\"><a href=\"#2-5-2-Challenges\" class=\"headerlink\" title=\"2.5.2 Challenges\"></a>2.5.2 Challenges</h3><ol>\n<li>What are the correct <strong>mechanisms</strong>?</li>\n<li>What are the correct <strong>policies</strong>?</li>\n</ol>\n<h2 id=\"2-6-Virtualization\"><a href=\"#2-6-Virtualization\" class=\"headerlink\" title=\"2.6 Virtualization\"></a>2.6 Virtualization</h2><blockquote>\n<p>Make each application believe it has each hardware resource to itself<br>这门课主要关注：CPU和Memory</p>\n</blockquote>\n<h3 id=\"2-6-1-Virtualizing-CPU\"><a href=\"#2-6-1-Virtualizing-CPU\" class=\"headerlink\" title=\"2.6.1 Virtualizing CPU\"></a>2.6.1 Virtualizing CPU</h3><ul>\n<li>系统有大量的虚拟CPU： 将一个物理CPU转换为实际上无穷多数量的CPU。允许很多程序同时执行</li>\n<li>可以理解成，当我们在命令行同时执行多个c文件的时候，这时候就可以看成是多个程序同时执行，并实际上使用同一个cpu，但是这些c文件，他们认为自己独占cpu。</li>\n</ul>\n<h3 id=\"2-6-2-Virtualizing-Memory\"><a href=\"#2-6-2-Virtualizing-Memory\" class=\"headerlink\" title=\"2.6.2 Virtualizing Memory\"></a>2.6.2 Virtualizing Memory</h3><ul>\n<li>物理内存其实是一个byte数组</li>\n<li>一个程序将自身所有的数据结构存放在内存中</li>\n<li>读取内存 （load）: <ul>\n<li>指定一个能够访问数据的地址</li>\n</ul>\n</li>\n<li>写入内存 （store）：<ul>\n<li>指定要写入特定地址的数据</li>\n</ul>\n</li>\n</ul>\n<p>虚拟化内存涉及到的一些Mechanism：</p>\n<ol>\n<li>Virtual-to-Physical Memory Mapping</li>\n<li>Page-Fault</li>\n</ol>\n<p>Demo1： 用c分配内存</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nint main(int argc, char *argv[1]) &#123;\n    int a = 0;\n    printf(&quot;%d\\n&quot;, a);//0\n    //aa指针指向a的地址\n    int *aa = &amp;a; \n    //加了*是指针，对应一个数据的地址。那么指针加上指针，就是再次得到值。\n    *aa += 1;\n    printf(&quot;%x\\n&quot;, aa);//a16738d4\n    printf(&quot;%d\\n&quot;, a);//1\n\n    //创建p指针，分配内存。\n    int *p = malloc(sizeof(int));\n    //复制给该片区域\n    *p = 100;\n    printf(&quot;address of p: %x\\n&quot;, p); //fbf156b0\n    printf(&quot;value stored in p: %d\\n&quot;, *p);//100\n    printf(&quot;address of p: %x\\n&quot;, &amp;(*p));//fbf156b0\n&#125;\n</code></pre>\n<p>每个进程都有自己的私有虚拟内存空间（private virtual memory space），OS则会映射这些address space到物理内存中</p>\n<ul>\n<li>对一个正在运行的程序的内存引用，不会影响到其他程序的address space。</li>\n<li>物理内存是一个由OS管理的共享资源</li>\n</ul>\n<h2 id=\"2-7-Concurrency\"><a href=\"#2-7-Concurrency\" class=\"headerlink\" title=\"2.7 Concurrency\"></a>2.7 Concurrency</h2><blockquote>\n<p>Concurrency（并发）： Events are occurring simultaneously and may interact with one another<br>OS必须能够处理并发事件</p>\n</blockquote>\n<p>比较简单的处理方式： 直接隔离他们，阻止他们交互，从而达到Hide Concurrency的效果。<br>但是，这样子指标不治本。因为很多时候有些任务，就是需要进程间交互才能执行的。这时候，才是真正想办法来处理了。<br>常见做法有：</p>\n<ol>\n<li>为进程提供抽象（锁(lock)、信号（semaphores）、条件变量(condition variables)、共享内存(shared memory)、关键部分(critical sections)）</li>\n<li>如果用了锁，则需要确保进程不会死锁</li>\n<li>让交互线程(interaction threads)必须协调对共享数据(shared data)的访问</li>\n</ol>\n<p>多线程Demo：</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;pthread.h&gt;\n\nvolatile int counter = 0;\nint loop;\nchar *name;\n\nvoid *worker() &#123;\n    for (int i = 0; i &lt; loop; i++) &#123;\n        counter++;\n    &#125;\n&#125;\n\nint main(int argc, char *argv[]) &#123;\n    loop = atoi(argv[1]);\n    pthread_t p1, p2;\n    printf(&quot;initial value: %d\\n&quot;, counter);\n    pthread_create(&amp;p1, NULL, worker, NULL);\n    pthread_create(&amp;p2, NULL, worker, NULL);\n    pthread_join(p1, NULL);\n    pthread_join(p2, NULL);\n    printf(&quot;Final value: %d\\n&quot;, counter); // 20.\n&#125;\n</code></pre>\n<p>可以试着执行之下上面代码。试着改变参数大小。可以发现，如果参数比较小（100~1000），那么最终结果就是参数值*2. 但是，当参数变大后，结果就不对了。</p>\n<pre><code class=\"shell\">./mte 10\ninitial value: 0\nFinal value: 20\n\n./mte 1000\ninitial value: 0\nFinal value: 2000\n\n./mte 10000\ninitial value: 0\nFinal value: 14692\n\n./mte 1000000\ninitial value: 0\nFinal value: 1007083\n</code></pre>\n<p>这是因为并发的情况并没有处理好。p1和p2这两个线程同时执行，并且同时对一个counter进行增加操作。数字小的时候，p1或p2执行的很快，因此并不会出现<strong>p2更新了数字，p1读了旧的数字并将该数字更新到了和p2更新后同样值的情况</strong>。参考数据库的脏读。</p>\n<p>有点抽象，举个例子：</p>\n<pre><code>p2:  读出counter: 10000  然后+ 1 = 10001\np1： 读出counter: 10000  然后+ 1 = 10001;\n</code></pre>\n<p>那这样就等于白操作了。</p>\n<h2 id=\"2-8-Persistence\"><a href=\"#2-8-Persistence\" class=\"headerlink\" title=\"2.8 Persistence\"></a>2.8 Persistence</h2><blockquote>\n<p>Persistence: Access information permanently</p>\n</blockquote>\n<ul>\n<li>信息的寿命比任何一个线程都要长</li>\n<li>机器出现未预期的<strong>重启、断电</strong>。这时候就体现出持久化的重要性了</li>\n</ul>\n<p>持久化需要：</p>\n<ol>\n<li>确保出现unexpected failure的时候，信息能够正确的存储</li>\n<li>提供Abstraction使得进程不知道数据是如何存储的</li>\n<li>因为磁盘IO很慢，我们需要对持久化进行优化</li>\n</ol>\n<h3 id=\"2-8-1-OS-在持久化过程中做了什么？\"><a href=\"#2-8-1-OS-在持久化过程中做了什么？\" class=\"headerlink\" title=\"2.8.1 OS 在持久化过程中做了什么？\"></a>2.8.1 OS 在持久化过程中做了什么？</h3><ol>\n<li>搞清楚新的数据在disk的那一块存放</li>\n<li>向底层（underlying）存储设备（storage device）发出I&#x2F;O 请求</li>\n<li>文件系统（FileSystem）在IO期间处理崩溃</li>\n</ol>\n<h3 id=\"2-8-2-两种持久化策略：\"><a href=\"#2-8-2-两种持久化策略：\" class=\"headerlink\" title=\"2.8.2 两种持久化策略：\"></a>2.8.2 两种持久化策略：</h3><ol>\n<li><p>Journaling</p>\n<ul>\n<li>日志文件系统： 一种文件系统，在将这些更改提交到主文件系统之前，使用日志记录对文件系统的更改</li>\n<li>运行流程：<ul>\n<li>对文件系统的更改首先记录在日志中</li>\n<li>更改成功写入日志后，将其提交到主文件系统</li>\n<li>当系统出现崩溃或故障时，可以通过重放日志来恢复文件系统。日志中记录的任何不完整或不一致的操作都可以完成或撤消，以维护文件系统的完整性。</li>\n<li>崩溃后恢复速度更快</li>\n<li>数据完整性得到保证</li>\n</ul>\n</li>\n<li>例子： ext3、ext4</li>\n</ul>\n</li>\n<li><p>Copy on write</p>\n<ul>\n<li>写入时不直接对原位置的数据进行修改，而是写入新的位置</li>\n<li>原数据将一直保存，直到写入完成</li>\n<li>运行流程：<ol>\n<li>当需要读取数据时，首先从当前位置读取数据</li>\n<li>在新位置制作数据的副本</li>\n<li>对副本进行修改</li>\n<li>最后将只想原数据的指针更新指向新数据的副本</li>\n</ol>\n</li>\n<li>优点：<ol>\n<li>简化了崩溃后的恢复。因为在修改完成前的原始数据不会受到影响</li>\n<li>提供了任何给定时间点的一致数据快照</li>\n</ol>\n</li>\n<li>例子： 一些现代化的文件系统，如ZFS、Btrfs</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"3-CPU-Virtualization\"><a href=\"#3-CPU-Virtualization\" class=\"headerlink\" title=\"3 CPU Virtualization\"></a>3 CPU Virtualization</h2><blockquote>\n<p>从本章开始，我们正式开始讨论虚拟化的第一个主题： CPU 虚拟化<br>本章会解决以下问题：</p>\n<ol>\n<li>What is a process?</li>\n<li>Why is <strong>limited direct execution</strong> a good approach for virtualizing the CPU? </li>\n<li>What execution state must be saved for a process? </li>\n<li>What 3 modes could a process in?</li>\n</ol>\n</blockquote>\n<h3 id=\"3-1-What-is-process\"><a href=\"#3-1-What-is-process\" class=\"headerlink\" title=\"3.1 What is process?\"></a>3.1 What is process?</h3><blockquote>\n<p>Process: An <strong>execution stream</strong>（执行流） in the context（上下文） of a <strong>process state</strong></p>\n</blockquote>\n<p><strong>execution stream</strong><br>    * A stream of executing instructions<br>    * Running piece of code<br>    * Thread of control (其实和execution stream一个意思。单线程的话就是执行流嘛。然后多线程的话，每个线程都有自己的执行流。)</p>\n<p>执行流指的是计算机程序正在执行的指令的顺序流。代表着一段指令是活动的。</p>\n<ul>\n<li>说人话，就是正在跑的程序，这个程序得是活的，而不是在磁盘上的静态文件。在跑的过程中，CPU会直接处理这些指令序列</li>\n</ul>\n<p>补充一下： CPU全名<strong>central processing unit</strong>。别学了半天OS，CPU到底是个啥都不知道。。</p>\n<p><strong>process state</strong><br>    * Everything that the running code can affect or affected by<br>    * Register<br>        * Heap, General Purpose, floating point, stack pointer, program counter<br>    * Memory Spaces<br>    * 例子： Open files</p>\n<ul>\n<li>process is not program!<ul>\n<li>program是静态的代码和数据</li>\n<li>process是动态的代码和数据</li>\n<li>可以有多个process运行同一个program</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-2-Process-Management-Segments\"><a href=\"#3-2-Process-Management-Segments\" class=\"headerlink\" title=\"3.2 Process Management Segments\"></a>3.2 Process Management Segments</h3><ul>\n<li>OS 会为每个进程分配memory。</li>\n<li>这个memory，包含了很多的块(segment)<ul>\n<li>从上到下来看</li>\n<li>最高层是 stack，用于存储局部变量。也包括command line arguments（位于顶部）， 以及环境变量</li>\n<li>再往下走是Heap。用于动态的memory。 在stack和heap之间，有一块unused segment，用于stack&#x2F;heap的扩容</li>\n<li>.bss Global Uniniialized Variables（全局未初始化变量）</li>\n<li>.data Global Initialized Variables（全局已初始化变量）</li>\n<li>最底层才是code。Read-Only</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-3-Process-vs-Thread\"><a href=\"#3-3-Process-vs-Thread\" class=\"headerlink\" title=\"3.3 Process vs. Thread\"></a>3.3 Process vs. Thread</h3><p>很明显，进程肯定不是线程</p>\n<p>但是他们还是有相似之处的，我们可以把线程看作一个<strong>轻量版</strong> 的process（Light weight Process LWP）。</p>\n<p>Thread is a execution stream that <strong>shares an address space</strong><br>一个进程里存在多个线程</p>\n<p>举个共享内存空间的例子。<br>对于进程来说，两个相同程序的不同进程，当他们都在access同一个地址值的时候，他们得到的结果不一样 （内存虚拟化）<br>而对于线程，一个进程内的多个线程，当他们都在access同一个地址值的时候，他们得到的结果是一样的</p>\n<p>对于进程，我们的目标是： <strong>让每个进程都感觉，自己是独占cpu的。</strong></p>\n<h3 id=\"3-4-Resources-Sharing\"><a href=\"#3-4-Resources-Sharing\" class=\"headerlink\" title=\"3.4 Resources Sharing\"></a>3.4 Resources Sharing</h3><p>了解了目标后，我们先看一下OS是怎么分配资源(resources)的</p>\n<p>首先， 资源分配通分为两种：<br>    1. time sharing<br>    2. space sharing</p>\n<blockquote>\n<p>time sharing 主要针对的是<strong>单CPU</strong>的情况。 使多个用户或进程能够共享单个处理器。<br>具体做法是：将可用的处理时间划分为多个小的时间间隔（timeslice），并且将这些时间片分配给各个用户&#x2F;进程。从而打到各个用户&#x2F;进程公平分配资源的效果，并且在他们各自分配的时间片内，能够独享cpu</p>\n</blockquote>\n<ul>\n<li>关si键词： 公平、快速切换（illusion of multaneous execution）</li>\n</ul>\n<blockquote>\n<p>space sharing 关注的是<strong>空间</strong>上的共享&#x2F;复用。每一个进程都被分配CPU容量的一小部分。</p>\n</blockquote>\n<ul>\n<li>关键词：并行（Parallel）执行， 同时执行（real simultanous execution）， 资源隔离（resource isolation）</li>\n</ul>\n<p>在共享时，我们主要注意两点：</p>\n<ol>\n<li>cannot perform restricted operation</li>\n<li>should not run forever or make the entire system slow &#x3D;&gt; performance</li>\n</ol>\n<p>###3.5 Provide Good CPU Performance</p>\n<ol>\n<li>Direct Execution<ul>\n<li>直接让用户操作硬件： CPU只负责创建并初始化进程，之后的控制权就回到起点（比如main()），交给用户手中了。</li>\n</ul>\n</li>\n</ol>\n<p>这样子用户进程的权限就过大了。因此Direct Execution肯定是有问题的：</p>\n<ol>\n<li><p>进程（Process）可以做一些受限（restricted）的事情</p>\n<ul>\n<li>比如读取&#x2F;写入别的进程的数据</li>\n</ul>\n</li>\n<li><p>进程可以永久执行（缓慢，有漏洞，恶意（malicious））</p>\n<ul>\n<li>OS 需要在进程之间交换(swap)的能力</li>\n</ul>\n</li>\n<li><p>OS很多操作很慢： 比如I&#x2F;O  还是进程切换能力</p>\n</li>\n</ol>\n<p>根据以上问题，我们可以给出一个折中的解决方案: 让OS和Hardware保留一些控制权。</p>\n<h3 id=\"3-5-1-Restricted-Ops\"><a href=\"#3-5-1-Restricted-Ops\" class=\"headerlink\" title=\"3.5.1 Restricted Ops\"></a>3.5.1 Restricted Ops</h3><p>Q1: 我们如何确保用户进程不会单方面（unilaterally）执行受限(restricted)的操作呢?</p>\n<p>解决方法： （权限级别&#x2F;分离）privilege levels&#x2F;separation</p>\n<ul>\n<li><p>如果想要直接和设备进行交互， 那就用kernal mode，这样就不受限制了。</p>\n</li>\n<li><p>对于用户进程，就在user mode下执行。如果试图和设备进行直接交互，就会进陷阱（trap），然后software interrupt</p>\n</li>\n<li><p>如果用户进程想和设备进行交互的话，可以通过以下方式：</p>\n<ol>\n<li>System Calls (由OS实现的方法)</li>\n<li>Change Privilege Level（权限级别）through system call（trap）</li>\n</ol>\n</li>\n</ul>\n<p>System call demo: 1 direct system call &amp; 1 system call provided by libc function.</p>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/syscall.h&gt;\n\nint main(int argc, char *argv[]) &#123;\n    long ID1, ID2;\n    ID1 = syscall(SYS_getpid);\n    printf(&quot;direct system call, pid = %ld\\n&quot;, ID1);//direct system call, pid = 3565265\n    ID2 = getpid();\n    printf(&quot;libc wrapped system call, pid = %ld\\n&quot;, ID2);//libc wrapped system call, pid = 3565265\n&#125;\n</code></pre>\n<h3 id=\"3-6-System-Call-Table-and-Trap-Table\"><a href=\"#3-6-System-Call-Table-and-Trap-Table\" class=\"headerlink\" title=\"3.6 System Call Table and Trap Table\"></a>3.6 System Call Table and Trap Table</h3><blockquote>\n<p>前面讲到过，系统调用表和陷阱表之间存在映射。用于管理用户引发的系统事件。<br>主要得知道怎么通过汇编，对系统调用表和陷阱表进行分析，从而得出系统时间的结果。</p>\n</blockquote>\n<p>CPU使用EAX寄存器（register）的内容作为源操作数。<br>窍门就是看$后面的数字内容，找系统调用表和陷阱表上数字对应的操作就行。</p>\n<p>比如这道题：</p>\n<pre><code>\nSuppose the trap table on a machine looks like the following:\n\n1 - illegal; call OS process kill routine\n\n2- run OS system call routine\n\nSuppose the OS&#39;s system call table looks like the following.\n\n1 - sys_read()\n\n2 - sys_write()\n\nWhat happens when an application performs the following instructions?\n\nmovl $1, %eax\n\nint $1\n</code></pre>\n<p>前面的1是system call表里的，后面的int $1是trap表里的。所以结果就是kill runtime.<br>movl -&gt; 放进eax， int -&gt; 产生软件中断。</p>\n<p>总结一下，user processes 是不被允许直接 perform：</p>\n<ol>\n<li>arbitrary memory access</li>\n<li>Disk I&#x2F;O</li>\n<li>Special x86 instructions like lidt. (Inteterrupted Discription Table)</li>\n</ol>\n<p>如果user processes做了上面的事情，那么大概率就是进了trap，然后kill routine。</p>\n<h3 id=\"3-7-How-to-take-CPU-away\"><a href=\"#3-7-How-to-take-CPU-away\" class=\"headerlink\" title=\"3.7 How to take CPU away?\"></a>3.7 How to take CPU away?</h3><blockquote>\n<p>OS 需要实现多任务处理（multitasking）。先记住一个词<strong>上下文切换</strong>。后面会重点围绕这个概念来讲</p>\n</blockquote>\n<ul>\n<li>Mechanism： To switch between classes</li>\n<li>Policy: To decide which process to run at what time.</li>\n</ul>\n<p><strong>Mechaism 和 Policy的区别？</strong></p>\n<blockquote>\n<p>Policy: Decision-maker to optimize some workload performance metric<br>    * Which Process to run? When to run? &#x3D;&gt; scheduler<br>Mechanism: Low-level code that implements the decision<br>    * How ? &#x3D;&gt; Dispatcher</p>\n</blockquote>\n<p>在这里，我们先将Dispatcher</p>\n<p>Dispatch 的逻辑很简单</p>\n<pre><code class=\"c\">while (1) &#123;\n    run process A for some time slice\n    stop process A and save its time\n    load context of another process\n&#125;\n</code></pre>\n<p>问题是：<br>    1. dispatcher怎么在一段时间后，重新获得控制？<br>    2. 哪些execution context必须被保存并恢复？</p>\n<h4 id=\"3-7-1-Q1-dispatcher怎么在一段时间后，重新获得控制？\"><a href=\"#3-7-1-Q1-dispatcher怎么在一段时间后，重新获得控制？\" class=\"headerlink\" title=\"3.7.1 Q1:dispatcher怎么在一段时间后，重新获得控制？\"></a>3.7.1 Q1:dispatcher怎么在一段时间后，重新获得控制？</h4><blockquote>\n<p>Option 1 : Cooperative Muti-tasking<br>通过trap，将CPU移交给操作系统的信任线程<br>    * 例如： System Call， page fault（想要换取的page不在main memory里）或者 error<br>    * yield()<br>但是，这样子的话也有问题。设想一个process，它没有任何越过自身权限的操作（I&#x2F;O）， 也没有进任何的Trap，也没有自己叫yield(),那么最终，这个process就会一直占着整个机器。唯一办法只有重启。</p>\n</blockquote>\n<p>这时候就有了第二种选项</p>\n<blockquote>\n<p>Option 2: Regain control without cooperation<br>我们可以启用周期性的，时钟。进入OS的时候，我们启动时钟，，时钟时间到后，硬件会生成timer interrupt<br>用户也不能屏蔽掉timer interrupt，因为他们没有权限这样子做。</p>\n</blockquote>\n<h4 id=\"3-7-2-Context-save在哪里？\"><a href=\"#3-7-2-Context-save在哪里？\" class=\"headerlink\" title=\"3.7.2 Context save在哪里？\"></a>3.7.2 Context save在哪里？</h4><blockquote>\n<p>process control block (PCB) 也可以叫做 process descriptor (PD)<br>每个进程都会有PCB</p>\n</blockquote>\n<h3 id=\"3-7-2-1-PCB-存储了哪些信息\"><a href=\"#3-7-2-1-PCB-存储了哪些信息\" class=\"headerlink\" title=\"3.7.2.1 PCB 存储了哪些信息\"></a>3.7.2.1 PCB 存储了哪些信息</h3><ol>\n<li>PID</li>\n<li>Process state (I.e., running, ready, or blocked)</li>\n<li>Execution state (all registers, PC, stack pointer) – Context</li>\n<li>Scheduling priority</li>\n<li>Accounting information (parent and child processes)</li>\n<li>Credentials (which resources can be accessed, owner)</li>\n<li>Pointers to other allocated resources (e.g., open files)</li>\n</ol>\n<h3 id=\"3-7-2-2-Context-保存-切换流程\"><a href=\"#3-7-2-2-Context-保存-切换流程\" class=\"headerlink\" title=\"3.7.2.2. Context 保存&#x2F;切换流程\"></a>3.7.2.2. Context 保存&#x2F;切换流程</h3><ol>\n<li>进程A从user mode 转换到 kernal mode，权限提升。OS决定从A转到B</li>\n<li>在kernal stack上保存A的上下文（PC， registers， kernal stack pointer）</li>\n<li>将stack pointer指向进程B的kernal stack</li>\n<li>从B的kernal stack中恢复上下文</li>\n</ol>\n<pre><code class=\"c\">struct context &#123;\n    int eip;\t// Index pointer register\n    int esp;\t// Stack pointer register\n    int ebx;\t// Called the base register\n    int ecx;\t// Called the counter register\n    int edx;\t// Called the data register\n    int esi;\t// Source index register\n    int edi;\t// Destination index register\n    int ebp;\t// Stack base pointer register\n&#125;;\n</code></pre>\n<p>一些进程在执行不需要Cpu的任务的时候，OS会switch到哪些需要CPU的进程<br>为了完成这个功能，OS必须关注进程的状态</p>\n<pre><code class=\"c\">enum proc_state &#123; UNUSED, EMBRYO, SLEEPING,\n                  RUNNABLE, RUNNING, ZOMBIE &#125;;\n</code></pre>\n<p>Running: 占用cpu<br>Ready： 等待CPU<br>Blocked：正在等待同步或者I&#x2F;O.</p>\n<h2 id=\"4-Scheduling\"><a href=\"#4-Scheduling\" class=\"headerlink\" title=\"4. Scheduling\"></a>4. Scheduling</h2><h3 id=\"4-1-两种创建Process的方式\"><a href=\"#4-1-两种创建Process的方式\" class=\"headerlink\" title=\"4.1 两种创建Process的方式\"></a>4.1 两种创建Process的方式</h3><ol>\n<li>New process from sratch (从0构建)</li>\n</ol>\n<ul>\n<li>步骤<ul>\n<li>从memory中加载指定代码和数据；并创建空的call stack</li>\n<li>create and initialzie pcb</li>\n<li>put process on ready list.</li>\n</ul>\n</li>\n</ul>\n<p>好处：定制化，no waste work<br>坏处： 很难涵盖所有可能的options for setup. 比如WindowesNT有10个参数，这咋搞。</p>\n<ol start=\"2\">\n<li>第二个方式： Clone an existing project and change it.<br>Fork(): 克隆调用者<ul>\n<li>停止目前的进程，保存他的状态</li>\n<li>复制代码的stack，code ,data, pcb</li>\n<li>将PCB放进ready list<br>Exec (char *file): exec覆盖调用进程</li>\n<li>替换掉目前的代码和数据</li>\n</ul>\n</li>\n</ol>\n<p>demo: Base shell program</p>\n<pre><code class=\"c\">while (1) &#123;\n    Char *cmd = getcmd();\n    Int retval = fork();\n    If (retval == 0) &#123;\n        // This is the child process\n        // Setup the child’s process environment here\n        // E.g., where is standard I/O, how to handle signals?\n        exec(cmd);\n        // exec does not return if it succeeds\n        printf(“ERROR: Could not execute %s\\n”, cmd);\n        exit(1);\n    &#125; else &#123;\n        // This is the parent process; Wait for child to finish\n        int pid = retval;\n        wait(pid);\n    &#125;\n&#125;\n</code></pre>\n<h3 id=\"4-2-Dispatcher-和-Scheduling-区别\"><a href=\"#4-2-Dispatcher-和-Scheduling-区别\" class=\"headerlink\" title=\"4.2 Dispatcher 和 Scheduling 区别\"></a>4.2 Dispatcher 和 Scheduling 区别</h3><blockquote>\n<p>Dispatcher是一个low level 的mechanism 而 Scheduling是policy</p>\n</blockquote>\n<p>Scheduling: Policy to determine which process gets CPU when</p>\n<p>重点： How to transition?\t(“mechanism”)<br>      When to transition?\t(“policy”)  </p>\n<p>一个用于理解的例子：文件IO   Process alternates between CPU and I&#x2F;O process moves between ready and blocked queues</p>\n<p>一些术语<br>Workload: set of <strong>job</strong> descriptions (arrival time, run_time)<br>    * Job: View as current CPU burst of a process</p>\n<p>Metric: measurement of quality of schedule<br>    * Minimize turnaround time<br>         Do not want to wait long for job to complete<br>         Completion_time – arrival_time （process&#x2F;thread complete - process&#x2F;thread add to runqueue）<br>    * Minimize response time<br>        * Schedule interactive jobs promptly so users see output quickly<br>        * Initial_schedule_time – arrival_time （process&#x2F;thread add to runqueue - process&#x2F;thread scheduled）<br>    * Maximize throughput<br>        * Want many jobs to complete per unit of time<br>    * Maximize resource utilization<br>        * Keep expensive devices busy<br>    Minimize overhead<br>        * Reduce number of context switches<br>    Maximize fairness<br>        * All jobs get same amount of CPU over some time interval</p>\n<h3 id=\"4-3-一些-Scheduler\"><a href=\"#4-3-一些-Scheduler\" class=\"headerlink\" title=\"4.3 一些 Scheduler\"></a>4.3 一些 Scheduler</h3><blockquote>\n<p>在考虑Workload的情况下，我们需要考虑这些是否达成</p>\n<ol>\n<li>Each job runs for the same amount of time</li>\n<li>All jobs <strong>arrive at the same time</strong></li>\n<li>All jobs only use the CPU (no I&#x2F;O)</li>\n<li>Run-time of each job is known</li>\n</ol>\n</blockquote>\n<h4 id=\"4-3-1-FIFO\"><a href=\"#4-3-1-FIFO\" class=\"headerlink\" title=\"4.3.1 FIFO\"></a>4.3.1 FIFO</h4><p>FIFO: First In, First Out\t<br>    - also called FCFS (first come first served)<br>     - 根据arrive time来干活<br>    - ABC同时到，先干A，A好了的同时马上干B<br>    - turn_around &#x3D; completion_time - arrival_time</p>\n<p>计算题： 算一下avg_turn_around_time:<br>    <img src=\"/image.png\" alt=\"Alt text\"></p>\n<p>显然FIFO是不满足第一条的， 每个Job跑的时间都不一样。从而导致，metric中的turnaround会很高</p>\n<p><img src=\"/image-1.png\" alt=\"Alt text\"><br>如果第一个来的job非常的time-consuming，那么就会导致，后面那些原本能够很快就完成的job，被堵着（阻塞）。</p>\n<p>这里的平均turnout_time就达到了 (60 + 70 + 80) &#x2F; 3 &#x3D; 70s 而原本有的任务只需要10s就可以完成。</p>\n<p>根据FIFO的缺点，我们就可以设计出第二种似乎更好的Scheduler。 Shortest Job First（SJF）</p>\n<h4 id=\"4-3-2-SJF\"><a href=\"#4-3-2-SJF\" class=\"headerlink\" title=\"4.3.2 SJF\"></a>4.3.2 SJF</h4><blockquote>\n<p>选择run_time最小的job</p>\n</blockquote>\n<p>计算1： 对于这个例子，平均turnout time是多少呢</p>\n<p><img src=\"/image-2.png\" alt=\"Alt text\"><br>(10 + 20 + 80) &#x2F; 3 &#x3D; 36.7</p>\n<p>计算2： 对于这个例子，平均turnout time是多少呢<br><img src=\"/image-3.png\" alt=\"Alt text\"><br>turn_around &#x3D; completion_time - arrival_time<br>记住这个公式，就很好算了。</p>\n<p>可以看出，FIFO和SJF都是非抢占式（non-preemptive）的。只有当任务执行完毕，或者优先级不够的情况下，才会让出CPU。</p>\n<p>抢占式（preemptive）的CPU则相反。就算你的job已经在执行了，万一来了个比你正在执行的job更牛的job，则会schedule更牛的job，你正在运行的job失去了CPU，在旁边等着</p>\n<h4 id=\"4-3-3-STCF\"><a href=\"#4-3-3-STCF\" class=\"headerlink\" title=\"4.3.3 STCF\"></a>4.3.3 STCF</h4><blockquote>\n<p>Shortest time-to-completion First<br>永远执行会完成最快的任务。</p>\n</blockquote>\n<p>计算：平均turnaround time<br><img src=\"/image-4.png\" alt=\"Alt text\"><br>(80 - 0) + (20 - 10) + (30 - 10) &#x3D; 80 + 10 +  20 &#x3D; 110<br>110&#x2F;3 &#x3D; 36.6s<br>很明显在这种情况下，抢占式的turnout time会比非抢占式的快很多</p>\n<h5 id=\"4-3-3-1-Response-Time\"><a href=\"#4-3-3-1-Response-Time\" class=\"headerlink\" title=\"4.3.3.1 Response Time\"></a>4.3.3.1 Response Time</h5><blockquote>\n<p>有时候，从<strong>任务到达</strong>到<strong>任务开始</strong>的这段时间也很重要。我们将这段时间称为：Response Time<br>response_time &#x3D; first_run_time - arrival_time</p>\n</blockquote>\n<p><img src=\"/image-5.png\" alt=\"Alt text\"><br>job b在10s的时候到。<br>turnaround time &#x3D; 30 - 10 &#x3D; 20s<br>response time &#x3D; 20 - 10 &#x3D; 10s</p>\n<h4 id=\"4-3-4-RR\"><a href=\"#4-3-4-RR\" class=\"headerlink\" title=\"4.3.4 RR\"></a>4.3.4 RR</h4><blockquote>\n<p>Round Robin<br>在response time方面比STCF、SJF、FIFO做的都好<br>因为它会每一段时间就会交替状态为Ready的进程，从而每个job第一次开始run的时间不会差距不会特别大。</p>\n</blockquote>\n<p><img src=\"/image-6.png\" alt=\"Alt text\"></p>\n<p>当前，有得必有失。RR在turnaround time上非常慢。因为job是交替执行的，原本能很快结束的job被迫得隔一段时间就让出CPU。<br>通常，我们选择RR的原因是因为我们不知道每个job的run time。选择rr的目的和stcf、sjf一样，都是为了让能够最快完成的进程，有机会最早做到。</p>\n<h4 id=\"4-3-5-MLFQ\"><a href=\"#4-3-5-MLFQ\" class=\"headerlink\" title=\"4.3.5 MLFQ\"></a>4.3.5 MLFQ</h4><blockquote>\n<p>Multi Level Feedback Queue</p>\n</blockquote>\n<p>不同类型的job，要求也不一样</p>\n<ul>\n<li>交互性的（interactive）program，需要更快的response time</li>\n<li>批处理（batch）program，需要更快的turnaround time。</li>\n</ul>\n<p>MLFQ 基于多层的RR（Round Robin）实现。<br>每层都有更高的优先级，并会抢占低优先级的层数。</p>\n<h5 id=\"4-3-5-决定优先级\"><a href=\"#4-3-5-决定优先级\" class=\"headerlink\" title=\"4.3.5 决定优先级\"></a>4.3.5 决定优先级</h5><p>两种方式能够用来决定优先级。</p>\n<ol>\n<li>History<blockquote>\n<p>使用进程过去的behavior来预测未来的behavior<br>根据此进程过去的 CPU 突发（作业），猜测 CPU 突发（作业）的行为方式</p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"4-3-6-MLFQ-Rules\"><a href=\"#4-3-6-MLFQ-Rules\" class=\"headerlink\" title=\"4.3.6 MLFQ Rules\"></a>4.3.6 MLFQ Rules</h5><ol>\n<li>If priority(A) &gt; priority(B), A runs</li>\n<li>If priority(A) &#x3D;&#x3D; priority(B), A and B runs in RR</li>\n<li>Process start at the top priority</li>\n<li>If job uses the full timeslice, then demote process</li>\n</ol>\n<p>MLFQ 的小缺陷<br>低优先级的任务可能永远都不会被scheduled。因此，我们需要每隔一段时间就去将所有的job放到最高优先级的队列中。</p>\n<h4 id=\"4-3-6-Lottery-Schedudling\"><a href=\"#4-3-6-Lottery-Schedudling\" class=\"headerlink\" title=\"4.3.6 Lottery Schedudling\"></a>4.3.6 Lottery Schedudling</h4><p>就和它的名字一样。彩票。<br>目标： fair share</p>\n<ul>\n<li>只关心能否公平地分享CPU</li>\n</ul>\n<p><strong>Fair Scheduler</strong>:: Guarantee that each job obtain a certain percentage of CPU time. Not care about response time or turnaroud time<br>实现逻辑也很简单： 给processes 一张彩票，谁中了谁就run。更高的优先级说明拿到了更多的彩票。</p>\n<p>Ticket: 代表了一个process可以占用多少份额的资源。</p>\n<p>比如 Process A拿了75张票，那就占用75%的CPU。 Proess B拿了25张票，那就占用25%的CPU<br>然后Scheduler就会在这100张票里去抽，抽中哪一个数字，就执行手里握着那个数字的线程任务。</p>\n<p>lottery 算法的实现</p>\n<pre><code class=\"c\">int counter = 0;\nint winner = getrandom(0, totaltickets);\nnode_t *current = head;\n\nwhile (current) &#123;\n    counter += current-&gt;tickets;\n    if (counter &gt; winner)\n        break;\n    current = current-&gt;next;\n&#125;\n// current is the winner\n</code></pre>\n<p><img src=\"/image.png\" alt=\"Alt text\"></p>\n<h4 id=\"4-3-7-Stride-Scheduling\"><a href=\"#4-3-7-Stride-Scheduling\" class=\"headerlink\" title=\"4.3.7 Stride Scheduling\"></a>4.3.7 Stride Scheduling</h4><p>目标同样是为了防止任何线程monopoly CPU。</p>\n<p>The basic idea is assign each process a ‘stride’, which represents its priority or share of the CPU time. </p>\n<p>系统中的每个进程都被分配了一个唯一的步长值。步幅与进程的优先级成反比。优先级较高的进程分配较小的步幅，优先级较低的进程分配较大的步幅。目标是让优先级较高的进程更频繁地访问 CPU。</p>\n<p>同样，进程会被放进一个队列。所有进程自身的counter从0开始。每次自己被执行了，就将自身的counter 翻一翻（counter + stride）。 Scheduler会选择具有最小counter的process。<br><img src=\"/image-1.png\" alt=\"Alt text\"></p>\n<ul>\n<li>Stride Scheduling同样也存在问题：<ul>\n<li>对于新增job，很难确保公平性和优先性。因为每个job，在初始状态下，counter都是0.问题是，当这些线程执行了一段时间后，counter就会变得很大，起码会和0差很多。那么新的job加进来，scheduler必然会判定一直让新job占用cpu，这样就不公平了</li>\n<li>就算不考虑新增。如果你想手动更改process的优先级，又该怎么做呢</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-3-8-Complete-Fair-Scheduling\"><a href=\"#4-3-8-Complete-Fair-Scheduling\" class=\"headerlink\" title=\"4.3.8 Complete Fair Scheduling\"></a>4.3.8 Complete Fair Scheduling</h4><p>很显然Stride Scheduling可以确保一定的完整性，但是不能完全确保完全公平</p>\n<p>我们的目标是无论线程数量的大小，无论何时添加、更改线程，都能保证其公平地使用资源</p>\n<p>Complete Fair Scheduling(CFS) 自从Linux 2.6.23 版本被应用。 O(logN) runtime<br>原本是MLFQ<br>Process now ordered by the amount of CPU time they use<br>取代了队列，转而使用红黑树</p>\n<ul>\n<li>CFS核心概念<ul>\n<li>使用一个counter记录累计执行时间（cummulative execution time）</li>\n<li>Schedule process with <strong>least</strong> runtime</li>\n</ul>\n</li>\n</ul>\n<p>下面这些都是gpt对其的介绍</p>\n<ul>\n<li><p>虚拟运行时间：</p>\n<ul>\n<li>CFS为每个可运行的进程维护一个“虚拟运行时间”。虚拟运行时间表示一个进程等待执行的时间相对于其他进程。较小的虚拟运行时间值表示更高的优先级。</li>\n</ul>\n</li>\n<li><p>调度决策：</p>\n<ul>\n<li>选择具有最小虚拟运行时间的进程进行执行。这确保了等待时间较长或累积CPU时间较短的进程被优先考虑。</li>\n</ul>\n</li>\n<li><p>时间量子：</p>\n<ul>\n<li>CFS不使用固定的时间片或时间量子，而是根据可运行进程的数量和它们的虚拟运行时间动态调整时间量子。</li>\n</ul>\n</li>\n<li><p>动态时间量子计算：</p>\n<ul>\n<li>CFS根据进程的权重计算每个进程的时间量子。权重是分配给每个进程的值，表示它在CPU中的份额。较高的权重导致较大的时间量子。</li>\n</ul>\n</li>\n<li><p>权重和Nice值：</p>\n<ul>\n<li>进程根据其优先级被分配权重。用户进程可以使用“nice”值进行优先级调整，该值范围从-20到+19。较低的nice值表示较高的优先级。权重与nice值成反比。</li>\n</ul>\n</li>\n<li><p>平衡机制：</p>\n<ul>\n<li>CFS采用平衡机制来维持随时间的公平性。它定期检查运行队列，如果检测到不平衡，则重新分配负载。这有助于确保没有进程在CPU时间上被不公平地耗尽。</li>\n</ul>\n</li>\n<li><p>稳态公平性：</p>\n<ul>\n<li>CFS旨在实现稳态公平性，这意味着在更长的时间内，每个进程都能获得其公平份额的CPU时间，而不考虑短期波动。</li>\n</ul>\n</li>\n<li><p>红黑树数据结构：</p>\n<ul>\n<li>CFS中的运行队列使用红黑树数据结构实现。这允许根据它们的虚拟运行时间有效地插入和删除进程。</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/image-2.png\" alt=\"Alt text\"></p>\n<h2 id=\"5-Muti-core-Scheduling\"><a href=\"#5-Muti-core-Scheduling\" class=\"headerlink\" title=\"5. Muti-core Scheduling\"></a>5. Muti-core Scheduling</h2><blockquote>\n<p>由于多核处理器的兴起，多核调度成为必须。因为单单添加CPU的数量不会让一个应用程序执行地更快。我们需要重写应用程序以保证其能<strong>并行</strong>执行</p>\n</blockquote>\n<h3 id=\"5-1-单CPU-缓存-main-memory\"><a href=\"#5-1-单CPU-缓存-main-memory\" class=\"headerlink\" title=\"5.1 单CPU + 缓存 + main memory\"></a>5.1 单CPU + 缓存 + main memory</h3><p>CPU分出一篇区域给缓存，存放popular data found in main memory. 速度块，容量小<br>Main memory存放所有数据，从main memory获取数据的速度会比cache慢很多</p>\n<h3 id=\"5-2-多CPU情况\"><a href=\"#5-2-多CPU情况\" class=\"headerlink\" title=\"5.2 多CPU情况\"></a>5.2 多CPU情况</h3><p>简单来说，每个CPU都有一个缓存区域。那两个CPU加起来就有两块缓存区域了。</p>\n<p>同步不同缓存区域的内存看起来很简单： CPU0 将memory中的 数据放进了自己的缓存区，CPU1会读取CPU0的缓存区，同步数据。</p>\n<p>但是，有一种特殊情况：<br>    1. CPU 0 读内存放进缓存，CPU1 读到了共享。<br>    2. CPU 0 更新了缓存中的数据 同时 CPU 1 被schedule了<br>    3. 此时 CPU 1 中保存的还是过去的数据。<br>数据就不一致了</p>\n<p>解决方法很简单： Bus Snooping<br>    * 每个cache都会通过观察bus来注意到memory的更新<br>    * 当CPU注意到自身memory中的数据更新了，就会注意到这个变化</p>\n<h3 id=\"5-3-Cache-Affinity\"><a href=\"#5-3-Cache-Affinity\" class=\"headerlink\" title=\"5.3 Cache Affinity\"></a>5.3 Cache Affinity</h3><blockquote>\n<p>无论是多CPU还是单CPU，Scheduler都会尝试将一个进程放在同一个CPU上执行。因为当CPU在执行该线程时，会往缓存里加很多关于改进程的状态。那么等到改进程下次启动时，就会更快一点，因为缓存里已经有信息了</p>\n</blockquote>\n<p>实现方式：将所有需要scheduled的任务全部放在一个队列里面。每个CPU就从这个<strong>Globally Shared</strong>的队列里面拿job。</p>\n<p>坏处：<br>    1. 锁<br>    2. 扩展性缺少<br>    3. Cache Affinity<br>    4. 实现起来复杂</p>\n<h3 id=\"5-4-Multi-queue-Multiprocessor-Scheduling-MQMS\"><a href=\"#5-4-Multi-queue-Multiprocessor-Scheduling-MQMS\" class=\"headerlink\" title=\"5.4 Multi-queue Multiprocessor Scheduling (MQMS)\"></a>5.4 Multi-queue Multiprocessor Scheduling (MQMS)</h3><ul>\n<li>Contains Multiple Scheduling queues<ul>\n<li>每条队列都有自己的Scheduling Discipline</li>\n<li>当job进入系统的时候，只会放在一条队列上， 从而避免了信息共享（information sharing）和 同步（synchronization）的问题</li>\n</ul>\n</li>\n</ul>\n<p>MQMS with Round Robin<br><img src=\"/image-3.png\" alt=\"Alt text\"></p>\n<p>MQMS的问题： 需要通过跨内核迁移进程来平衡跨内核的负载</p>\n<h2 id=\"6-Virtualizing-Memory\"><a href=\"#6-Virtualizing-Memory\" class=\"headerlink\" title=\"6. Virtualizing Memory\"></a>6. Virtualizing Memory</h2><p>目标： </p>\n<ul>\n<li>Transparency<ul>\n<li>Processes are not aware that memory is shared</li>\n<li>Works regardless of number and&#x2F;or location of processes</li>\n</ul>\n</li>\n<li>Protection<ul>\n<li>Cannot corrupt OS or other processes</li>\n</ul>\n</li>\n<li>Privacy<ul>\n<li>Cannot read data of other processes</li>\n</ul>\n</li>\n<li>Efficiency<ul>\n<li>Do not waste memory resources (minimize fragmentation（碎片化）)</li>\n</ul>\n</li>\n<li>Sharing<ul>\n<li>Cooperating processes can share portions of address space</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"6-1-Abstraction-Address-Space\"><a href=\"#6-1-Abstraction-Address-Space\" class=\"headerlink\" title=\"6.1 Abstraction: Address Space\"></a>6.1 Abstraction: Address Space</h3><blockquote>\n<p>Address space: Each process has set of addresses that map to bytes</p>\n</blockquote>\n<p>问题是：OS是如何让每个Process觉得，自己有专用的地址空间的？</p>\n<p>** 回顾 Addresss Space 中都有什么？ **</p>\n<ol>\n<li>静态：<ul>\n<li>Code</li>\n<li>Global Variables</li>\n</ul>\n</li>\n<li>动态：<ul>\n<li>Stack</li>\n<li>Heap</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"6-1-1-为什么进程需要动态地分配资源？\"><a href=\"#6-1-1-为什么进程需要动态地分配资源？\" class=\"headerlink\" title=\"6.1.1 为什么进程需要动态地分配资源？\"></a>6.1.1 为什么进程需要动态地分配资源？</h4><blockquote>\n<ol>\n<li>不知道编译时需要的内存量. 静态分配内存时必须悲观, 为最坏的情况分配足够的资源;不高效地使用存储</li>\n<li>对于那些递归的步骤，不知道会嵌套多少次</li>\n<li>进程中会有复杂的数据结构，需要我们手动分配资源。</li>\n</ol>\n</blockquote>\n<h4 id=\"6-1-2-Stack用在哪里？\"><a href=\"#6-1-2-Stack用在哪里？\" class=\"headerlink\" title=\"6.1.2 Stack用在哪里？\"></a>6.1.2 Stack用在哪里？</h4><blockquote>\n<p>操作系统将Stack用于过程调用帧(procedure call frames), 存放local varibles and parameters<br>局部变量例子</p>\n</blockquote>\n<pre><code class=\"c\">#include &lt;stdio.h&gt;\n\nvoid foo(int z);\n\nint main(int argc, char *argv[]) &#123;\n    int A = 0; \n    foo(A);\n    printf(&quot;A: %d\\n&quot;, A); //A: 0\n&#125;\n\nvoid foo(int z) &#123;\n    int A = 2;\n    z = 5;\n    printf(&quot;A: %d, Z: %d\\n&quot;, A, z); //A: 2, Z: 5\n&#125;\n</code></pre>\n<h4 id=\"6-1-3-Heap用在哪里？\"><a href=\"#6-1-3-Heap用在哪里？\" class=\"headerlink\" title=\"6.1.3 Heap用在哪里？\"></a>6.1.3 Heap用在哪里？</h4><blockquote>\n<p>任何位置的malloc(), new() 都会跑到heap里</p>\n<ul>\n<li>Heap memory consists of allocated area and free area</li>\n<li>Order of Allocation and free is unpredictable.</li>\n</ul>\n</blockquote>\n<p>pro：所有数据结构都是这样用的<br>cons:<br>    * Allocation can be slow<br>    * End up with small chunks of free spaces – Fragmentation(碎片化)</p>\n<h4 id=\"6-1-4-OS在managing-heap中的作用\"><a href=\"#6-1-4-OS在managing-heap中的作用\" class=\"headerlink\" title=\"6.1.4 OS在managing heap中的作用\"></a>6.1.4 OS在managing heap中的作用</h4><blockquote>\n<p>OS gives big chunk of free memory to process<br>OS provides library manages individual allocations</p>\n</blockquote>\n<p>代码中各个数据结构在address space中的分布<br><img src=\"/image-4.png\" alt=\"Alt text\"></p>\n","text":"1. 为什么要学习OSD？ OS forms the foundation of modern computing Abstractions: Modern S...","permalink":"/post/OSD","photos":[],"count_time":{"symbolsCount":"21k","symbolsTime":"19 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%AD%A6%E4%B9%A0OSD%EF%BC%9F\"><span class=\"toc-text\">1. 为什么要学习OSD？</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#2-OS-%E5%AF%BC%E8%AE%BA\"><span class=\"toc-text\">2. OS 导论</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-1-%E7%A1%AC%E4%BB%B6\"><span class=\"toc-text\">2.1 硬件</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-2-OS%E6%8F%90%E4%BE%9B%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">2.2 OS提供了什么？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-3-Abstrction\"><span class=\"toc-text\">2.3 Abstrction</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-1-%E7%8E%B0%E4%BB%A3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%80%9A%E5%B8%B8%E4%B8%BA%E5%93%AA%E4%BA%9B%E8%B5%84%E6%BA%90%E6%8F%90%E4%BE%9B%E5%93%AA%E4%BA%9B%E6%8A%BD%E8%B1%A1\"><span class=\"toc-text\">2.3.1 现代操作系统通常为哪些资源提供哪些抽象?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%8F%90%E4%BE%9B%E6%8A%BD%E8%B1%A1%E7%9A%84%E5%A5%BD%E5%A4%84%EF%BC%9F\"><span class=\"toc-text\">2.3.2 操作系统提供抽象的好处？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-3-3-%E6%8C%91%E6%88%98\"><span class=\"toc-text\">2.3.3 挑战</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-4-System-Calls\"><span class=\"toc-text\">2.4 System Calls</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-5-Resource-Management\"><span class=\"toc-text\">2.5 Resource Management</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-1-Advantages-of-OS-providing-resource-management\"><span class=\"toc-text\">2.5.1 Advantages of OS providing resource management:</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-5-2-Challenges\"><span class=\"toc-text\">2.5.2 Challenges</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-6-Virtualization\"><span class=\"toc-text\">2.6 Virtualization</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-1-Virtualizing-CPU\"><span class=\"toc-text\">2.6.1 Virtualizing CPU</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-6-2-Virtualizing-Memory\"><span class=\"toc-text\">2.6.2 Virtualizing Memory</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-7-Concurrency\"><span class=\"toc-text\">2.7 Concurrency</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-8-Persistence\"><span class=\"toc-text\">2.8 Persistence</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-1-OS-%E5%9C%A8%E6%8C%81%E4%B9%85%E5%8C%96%E8%BF%87%E7%A8%8B%E4%B8%AD%E5%81%9A%E4%BA%86%E4%BB%80%E4%B9%88%EF%BC%9F\"><span class=\"toc-text\">2.8.1 OS 在持久化过程中做了什么？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2-8-2-%E4%B8%A4%E7%A7%8D%E6%8C%81%E4%B9%85%E5%8C%96%E7%AD%96%E7%95%A5%EF%BC%9A\"><span class=\"toc-text\">2.8.2 两种持久化策略：</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-CPU-Virtualization\"><span class=\"toc-text\">3 CPU Virtualization</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-1-What-is-process\"><span class=\"toc-text\">3.1 What is process?</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-2-Process-Management-Segments\"><span class=\"toc-text\">3.2 Process Management Segments</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-3-Process-vs-Thread\"><span class=\"toc-text\">3.3 Process vs. Thread</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-4-Resources-Sharing\"><span class=\"toc-text\">3.4 Resources Sharing</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-5-1-Restricted-Ops\"><span class=\"toc-text\">3.5.1 Restricted Ops</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-6-System-Call-Table-and-Trap-Table\"><span class=\"toc-text\">3.6 System Call Table and Trap Table</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-How-to-take-CPU-away\"><span class=\"toc-text\">3.7 How to take CPU away?</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-7-1-Q1-dispatcher%E6%80%8E%E4%B9%88%E5%9C%A8%E4%B8%80%E6%AE%B5%E6%97%B6%E9%97%B4%E5%90%8E%EF%BC%8C%E9%87%8D%E6%96%B0%E8%8E%B7%E5%BE%97%E6%8E%A7%E5%88%B6%EF%BC%9F\"><span class=\"toc-text\">3.7.1 Q1:dispatcher怎么在一段时间后，重新获得控制？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-7-2-Context-save%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F\"><span class=\"toc-text\">3.7.2 Context save在哪里？</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-2-1-PCB-%E5%AD%98%E5%82%A8%E4%BA%86%E5%93%AA%E4%BA%9B%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">3.7.2.1 PCB 存储了哪些信息</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#3-7-2-2-Context-%E4%BF%9D%E5%AD%98-%E5%88%87%E6%8D%A2%E6%B5%81%E7%A8%8B\"><span class=\"toc-text\">3.7.2.2. Context 保存&#x2F;切换流程</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-Scheduling\"><span class=\"toc-text\">4. Scheduling</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-1-%E4%B8%A4%E7%A7%8D%E5%88%9B%E5%BB%BAProcess%E7%9A%84%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">4.1 两种创建Process的方式</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-2-Dispatcher-%E5%92%8C-Scheduling-%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">4.2 Dispatcher 和 Scheduling 区别</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#4-3-%E4%B8%80%E4%BA%9B-Scheduler\"><span class=\"toc-text\">4.3 一些 Scheduler</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-1-FIFO\"><span class=\"toc-text\">4.3.1 FIFO</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-2-SJF\"><span class=\"toc-text\">4.3.2 SJF</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-3-STCF\"><span class=\"toc-text\">4.3.3 STCF</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-3-1-Response-Time\"><span class=\"toc-text\">4.3.3.1 Response Time</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-4-RR\"><span class=\"toc-text\">4.3.4 RR</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-5-MLFQ\"><span class=\"toc-text\">4.3.5 MLFQ</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-5-%E5%86%B3%E5%AE%9A%E4%BC%98%E5%85%88%E7%BA%A7\"><span class=\"toc-text\">4.3.5 决定优先级</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#4-3-6-MLFQ-Rules\"><span class=\"toc-text\">4.3.6 MLFQ Rules</span></a></li></ol></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-6-Lottery-Schedudling\"><span class=\"toc-text\">4.3.6 Lottery Schedudling</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-7-Stride-Scheduling\"><span class=\"toc-text\">4.3.7 Stride Scheduling</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-3-8-Complete-Fair-Scheduling\"><span class=\"toc-text\">4.3.8 Complete Fair Scheduling</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-Muti-core-Scheduling\"><span class=\"toc-text\">5. Muti-core Scheduling</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-1-%E5%8D%95CPU-%E7%BC%93%E5%AD%98-main-memory\"><span class=\"toc-text\">5.1 单CPU + 缓存 + main memory</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-2-%E5%A4%9ACPU%E6%83%85%E5%86%B5\"><span class=\"toc-text\">5.2 多CPU情况</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-3-Cache-Affinity\"><span class=\"toc-text\">5.3 Cache Affinity</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#5-4-Multi-queue-Multiprocessor-Scheduling-MQMS\"><span class=\"toc-text\">5.4 Multi-queue Multiprocessor Scheduling (MQMS)</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-Virtualizing-Memory\"><span class=\"toc-text\">6. Virtualizing Memory</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#6-1-Abstraction-Address-Space\"><span class=\"toc-text\">6.1 Abstraction: Address Space</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-1-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%9B%E7%A8%8B%E9%9C%80%E8%A6%81%E5%8A%A8%E6%80%81%E5%9C%B0%E5%88%86%E9%85%8D%E8%B5%84%E6%BA%90%EF%BC%9F\"><span class=\"toc-text\">6.1.1 为什么进程需要动态地分配资源？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-2-Stack%E7%94%A8%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F\"><span class=\"toc-text\">6.1.2 Stack用在哪里？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-3-Heap%E7%94%A8%E5%9C%A8%E5%93%AA%E9%87%8C%EF%BC%9F\"><span class=\"toc-text\">6.1.3 Heap用在哪里？</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#6-1-4-OS%E5%9C%A8managing-heap%E4%B8%AD%E7%9A%84%E4%BD%9C%E7%94%A8\"><span class=\"toc-text\">6.1.4 OS在managing heap中的作用</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}},"mapped":true,"hidden":false,"prev_post":{"title":"App手工测试要点","uid":"7571cb194f7c4b5f1528b0f44328eda0","slug":"app","date":"2023-11-09T05:00:00.000Z","updated":"2023-11-10T06:00:00.381Z","comments":true,"path":"api/articles/app.json","keywords":"Kangwei Zhu's Blog","cover":[],"text":"1. App 手工测试基础知识1.1 App架构 基本和Web的后端服务器是相同的 表示层 应用层 数据库 前后端也使用HTTP协议进行交互 App中, 前后端...","permalink":"/post/app","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}}},"next_post":{"title":"SQL查漏补缺","uid":"0a779d0e741d0e316d7b9d9aa44bdfc9","slug":"SQL 查漏补缺","date":"2023-10-15T22:44:08.000Z","updated":"2023-11-09T06:14:21.122Z","comments":true,"path":"api/articles/SQL 查漏补缺.json","keywords":"Kangwei Zhu's Blog","cover":null,"text":"SQL查漏补缺 记录一下SQL刷题时候遇到的知识点漏洞 1. SQL !&#x3D; 和 &#x3D;&#x3D; 的适用场景 – SQL 中，!&#x3D; ...","permalink":"/post/SQL 查漏补缺","photos":[],"count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"categories":[],"tags":[],"author":{"name":"Kangwei Zhu","slug":"blog-author","avatar":"https://avatars.githubusercontent.com/u/93107633?v=4","link":"/","description":"偏我来时不逢春，偏我去时春满城","socials":{"github":"https://github.com/KangweiZhu","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"leetcode":{"icon":"/svg/leetcode-svgrepo-com.svg","link":"https://leetcode.com/anicaaovo/"}}}}}}